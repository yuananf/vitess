// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	colIdent             ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               *SQLVal
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	constraintDefinition *ConstraintDefinition
	constraintInfo       ConstraintInfo
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	item                 interface{}
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const UNLOCK = 57374
const KEYS = 57375
const VALUES = 57376
const LAST_INSERT_ID = 57377
const NEXT = 57378
const VALUE = 57379
const SHARE = 57380
const MODE = 57381
const SQL_NO_CACHE = 57382
const SQL_CACHE = 57383
const JOIN = 57384
const STRAIGHT_JOIN = 57385
const LEFT = 57386
const RIGHT = 57387
const INNER = 57388
const OUTER = 57389
const CROSS = 57390
const NATURAL = 57391
const USE = 57392
const FORCE = 57393
const ON = 57394
const USING = 57395
const ID = 57396
const HEX = 57397
const STRING = 57398
const INTEGRAL = 57399
const FLOAT = 57400
const HEXNUM = 57401
const VALUE_ARG = 57402
const LIST_ARG = 57403
const COMMENT = 57404
const COMMENT_KEYWORD = 57405
const BIT_LITERAL = 57406
const NULL = 57407
const TRUE = 57408
const FALSE = 57409
const OR = 57410
const AND = 57411
const NOT = 57412
const BETWEEN = 57413
const CASE = 57414
const WHEN = 57415
const THEN = 57416
const ELSE = 57417
const END = 57418
const LE = 57419
const GE = 57420
const NE = 57421
const NULL_SAFE_EQUAL = 57422
const IS = 57423
const LIKE = 57424
const REGEXP = 57425
const IN = 57426
const SHIFT_LEFT = 57427
const SHIFT_RIGHT = 57428
const DIV = 57429
const MOD = 57430
const UNARY = 57431
const COLLATE = 57432
const BINARY = 57433
const UNDERSCORE_BINARY = 57434
const UNDERSCORE_UTF8MB4 = 57435
const INTERVAL = 57436
const JSON_EXTRACT_OP = 57437
const JSON_UNQUOTE_EXTRACT_OP = 57438
const CREATE = 57439
const ALTER = 57440
const DROP = 57441
const RENAME = 57442
const ANALYZE = 57443
const ADD = 57444
const SCHEMA = 57445
const TABLE = 57446
const INDEX = 57447
const VIEW = 57448
const TO = 57449
const IGNORE = 57450
const IF = 57451
const UNIQUE = 57452
const PRIMARY = 57453
const COLUMN = 57454
const CONSTRAINT = 57455
const SPATIAL = 57456
const FULLTEXT = 57457
const FOREIGN = 57458
const REFERENCES = 57459
const KEY_BLOCK_SIZE = 57460
const SHOW = 57461
const DESCRIBE = 57462
const EXPLAIN = 57463
const DATE = 57464
const ESCAPE = 57465
const REPAIR = 57466
const OPTIMIZE = 57467
const TRUNCATE = 57468
const MAXVALUE = 57469
const PARTITION = 57470
const REORGANIZE = 57471
const LESS = 57472
const THAN = 57473
const PROCEDURE = 57474
const TRIGGER = 57475
const VINDEX = 57476
const VINDEXES = 57477
const STATUS = 57478
const VARIABLES = 57479
const BEGIN = 57480
const START = 57481
const TRANSACTION = 57482
const COMMIT = 57483
const ROLLBACK = 57484
const BIT = 57485
const TINYINT = 57486
const SMALLINT = 57487
const MEDIUMINT = 57488
const INT = 57489
const INTEGER = 57490
const BIGINT = 57491
const INTNUM = 57492
const REAL = 57493
const DOUBLE = 57494
const FLOAT_TYPE = 57495
const DECIMAL = 57496
const NUMERIC = 57497
const TIME = 57498
const TIMESTAMP = 57499
const DATETIME = 57500
const YEAR = 57501
const CHAR = 57502
const VARCHAR = 57503
const BOOL = 57504
const CHARACTER = 57505
const VARBINARY = 57506
const NCHAR = 57507
const TEXT = 57508
const TINYTEXT = 57509
const MEDIUMTEXT = 57510
const LONGTEXT = 57511
const BLOB = 57512
const TINYBLOB = 57513
const MEDIUMBLOB = 57514
const LONGBLOB = 57515
const JSON = 57516
const ENUM = 57517
const GEOMETRY = 57518
const POINT = 57519
const LINESTRING = 57520
const POLYGON = 57521
const GEOMETRYCOLLECTION = 57522
const MULTIPOINT = 57523
const MULTILINESTRING = 57524
const MULTIPOLYGON = 57525
const NULLX = 57526
const AUTO_INCREMENT = 57527
const APPROXNUM = 57528
const SIGNED = 57529
const UNSIGNED = 57530
const ZEROFILL = 57531
const COLLATION = 57532
const DATABASES = 57533
const TABLES = 57534
const VITESS_KEYSPACES = 57535
const VITESS_SHARDS = 57536
const VITESS_TABLETS = 57537
const VSCHEMA_TABLES = 57538
const FULL = 57539
const PROCESSLIST = 57540
const COLUMNS = 57541
const NAMES = 57542
const CHARSET = 57543
const GLOBAL = 57544
const SESSION = 57545
const ISOLATION = 57546
const LEVEL = 57547
const READ = 57548
const WRITE = 57549
const ONLY = 57550
const REPEATABLE = 57551
const COMMITTED = 57552
const UNCOMMITTED = 57553
const SERIALIZABLE = 57554
const CURRENT_TIMESTAMP = 57555
const DATABASE = 57556
const CURRENT_DATE = 57557
const CURRENT_TIME = 57558
const LOCALTIME = 57559
const LOCALTIMESTAMP = 57560
const UTC_DATE = 57561
const UTC_TIME = 57562
const UTC_TIMESTAMP = 57563
const REPLACE = 57564
const CONVERT = 57565
const CAST = 57566
const SUBSTR = 57567
const SUBSTRING = 57568
const GROUP_CONCAT = 57569
const SEPARATOR = 57570
const MATCH = 57571
const AGAINST = 57572
const BOOLEAN = 57573
const LANGUAGE = 57574
const WITH = 57575
const QUERY = 57576
const EXPANSION = 57577
const UNUSED = 57578
const TERMINATED = 57579
const STARTING = 57580
const ESCAPED = 57581
const ENCLOSED = 57582
const FIELDS = 57583
const DATA = 57584
const LOAD = 57585
const INFILE = 57586
const LOCAL = 57587
const LINES = 57588

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"REFERENCES",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"TERMINATED",
	"STARTING",
	"ESCAPED",
	"ENCLOSED",
	"FIELDS",
	"DATA",
	"LOAD",
	"INFILE",
	"LOCAL",
	"LINES",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 29,
	-2, 4,
	-1, 37,
	153, 289,
	154, 289,
	-2, 281,
	-1, 251,
	111, 618,
	-2, 614,
	-1, 252,
	111, 619,
	-2, 615,
	-1, 322,
	81, 791,
	-2, 79,
	-1, 323,
	81, 751,
	-2, 80,
	-1, 328,
	81, 731,
	-2, 580,
	-1, 330,
	81, 772,
	-2, 582,
	-1, 606,
	53, 62,
	55, 62,
	-2, 64,
	-1, 742,
	111, 621,
	-2, 617,
	-1, 954,
	5, 30,
	-2, 423,
	-1, 979,
	5, 29,
	-2, 553,
	-1, 1206,
	5, 30,
	-2, 554,
	-1, 1252,
	5, 29,
	-2, 556,
	-1, 1324,
	5, 30,
	-2, 557,
}

const yyPrivate = 57344

const yyLast = 11400

var yyAct = [...]int{

	252, 1311, 1117, 1112, 892, 1263, 677, 804, 256, 553,
	1140, 1212, 822, 872, 1113, 282, 844, 886, 1042, 919,
	600, 552, 3, 840, 1109, 982, 853, 1086, 843, 230,
	805, 767, 80, 998, 774, 327, 195, 706, 1045, 195,
	946, 314, 57, 598, 221, 1033, 777, 987, 776, 616,
	793, 882, 857, 485, 433, 801, 602, 928, 491, 615,
	321, 587, 239, 316, 505, 497, 195, 195, 80, 318,
	744, 308, 195, 229, 80, 254, 567, 192, 309, 56,
	1314, 482, 711, 258, 228, 1338, 1352, 1336, 1349, 222,
	223, 224, 225, 1316, 1283, 1370, 1342, 1368, 1322, 1363,
	893, 1341, 1104, 1321, 1200, 437, 1273, 1134, 317, 307,
	243, 227, 1006, 436, 61, 1005, 226, 458, 1007, 835,
	249, 1135, 1136, 1292, 518, 517, 527, 528, 520, 521,
	522, 523, 524, 525, 526, 519, 1282, 617, 529, 618,
	63, 64, 65, 66, 67, 1024, 1148, 1149, 1150, 312,
	836, 837, 865, 446, 1153, 1151, 190, 186, 187, 188,
	474, 1225, 1241, 873, 1189, 1187, 475, 472, 1087, 24,
	25, 52, 27, 28, 220, 469, 470, 1365, 1357, 1312,
	1066, 460, 802, 462, 195, 1304, 195, 1271, 43, 858,
	860, 447, 195, 29, 48, 49, 440, 184, 685, 195,
	1089, 1264, 676, 80, 80, 80, 80, 997, 80, 459,
	461, 996, 995, 38, 1266, 860, 80, 54, 183, 434,
	184, 823, 825, 435, 1176, 444, 1297, 445, 443, 1053,
	860, 198, 1091, 452, 1095, 185, 1090, 1209, 1088, 1073,
	454, 541, 542, 1093, 1017, 1063, 80, 962, 940, 716,
	509, 1065, 1092, 453, 504, 841, 519, 494, 1051, 529,
	529, 909, 1302, 1157, 713, 1094, 1096, 189, 1106, 866,
	707, 479, 480, 1167, 985, 908, 493, 31, 32, 34,
	33, 36, 1293, 1265, 859, 873, 1272, 1270, 619, 856,
	854, 457, 852, 855, 439, 858, 824, 794, 680, 37,
	44, 45, 1320, 913, 46, 47, 35, 195, 1022, 859,
	1053, 463, 907, 1158, 195, 195, 195, 1152, 39, 40,
	80, 41, 42, 1052, 859, 502, 80, 1306, 1057, 1054,
	1047, 1048, 1055, 1050, 1049, 499, 1326, 539, 182, 1051,
	751, 504, 449, 450, 451, 1064, 1056, 1062, 582, 1231,
	708, 495, 1059, 921, 749, 750, 748, 606, 719, 720,
	1230, 904, 901, 902, 794, 900, 969, 937, 938, 939,
	441, 442, 569, 570, 571, 572, 573, 574, 575, 607,
	543, 544, 545, 546, 547, 548, 549, 550, 1367, 613,
	54, 911, 914, 734, 736, 737, 862, 312, 735, 1037,
	747, 863, 53, 306, 1052, 503, 502, 1036, 1025, 1057,
	1054, 1047, 1048, 1055, 1050, 1049, 522, 523, 524, 525,
	526, 519, 504, 50, 529, 1366, 906, 1056, 1362, 959,
	920, 1360, 22, 1046, 958, 1354, 957, 80, 503, 502,
	1300, 1328, 483, 195, 195, 80, 1303, 195, 905, 768,
	195, 769, 503, 502, 195, 504, 80, 80, 80, 80,
	80, 80, 80, 80, 1248, 503, 502, 1228, 1069, 504,
	80, 80, 1108, 1034, 924, 1256, 1364, 195, 503, 502,
	1208, 484, 504, 1144, 682, 683, 910, 1143, 686, 694,
	1018, 689, 234, 1013, 1008, 504, 895, 80, 465, 912,
	770, 195, 1331, 484, 1256, 1309, 484, 80, 283, 51,
	715, 692, 1256, 1268, 1277, 466, 467, 468, 709, 471,
	1256, 484, 1276, 721, 1256, 1257, 1154, 478, 745, 691,
	518, 517, 527, 528, 520, 521, 522, 523, 524, 525,
	526, 519, 730, 690, 529, 742, 681, 714, 1221, 1220,
	983, 80, 272, 271, 274, 275, 276, 277, 723, 679,
	51, 273, 278, 503, 502, 674, 324, 740, 235, 786,
	789, 738, 1131, 484, 313, 795, 455, 781, 947, 448,
	504, 434, 195, 1164, 1163, 195, 195, 195, 195, 195,
	1160, 1161, 806, 1160, 1159, 583, 746, 195, 952, 484,
	195, 584, 484, 779, 195, 782, 783, 779, 484, 195,
	195, 790, 798, 80, 626, 625, 1204, 771, 772, 610,
	584, 781, 1076, 803, 584, 797, 80, 799, 800, 791,
	24, 1110, 743, 984, 983, 752, 753, 754, 755, 756,
	757, 758, 759, 760, 761, 762, 763, 764, 765, 766,
	984, 831, 830, 874, 875, 876, 807, 819, 1251, 810,
	827, 611, 828, 609, 808, 809, 952, 811, 312, 312,
	312, 312, 312, 832, 833, 58, 584, 195, 54, 54,
	80, 848, 80, 312, 964, 961, 195, 1166, 1162, 195,
	80, 888, 312, 983, 1196, 484, 1009, 520, 521, 522,
	523, 524, 525, 526, 519, 24, 195, 529, 195, 195,
	834, 464, 464, 464, 464, 952, 464, 829, 891, 609,
	952, 612, 884, 885, 464, 717, 1343, 915, 963, 960,
	916, 518, 517, 527, 528, 520, 521, 522, 523, 524,
	525, 526, 519, 236, 51, 529, 1235, 918, 675, 867,
	887, 1145, 742, 54, 1125, 1012, 684, 988, 989, 538,
	883, 878, 540, 877, 745, 69, 678, 695, 696, 697,
	698, 699, 700, 701, 702, 930, 929, 936, 890, 1147,
	1110, 703, 704, 1038, 991, 688, 476, 729, 994, 993,
	551, 54, 555, 556, 557, 558, 559, 560, 561, 562,
	563, 813, 566, 568, 568, 568, 568, 568, 568, 568,
	568, 576, 577, 578, 579, 816, 814, 812, 324, 942,
	817, 815, 599, 979, 951, 240, 241, 80, 1355, 281,
	195, 24, 746, 1340, 1072, 589, 592, 593, 594, 590,
	966, 591, 595, 968, 80, 988, 989, 818, 925, 593,
	594, 1346, 498, 935, 1000, 977, 1002, 934, 992, 978,
	1010, 78, 589, 592, 593, 594, 590, 496, 591, 595,
	943, 944, 945, 1001, 486, 1029, 624, 456, 1021, 54,
	1308, 1307, 1026, 1027, 1003, 1249, 487, 1019, 1014, 1202,
	1236, 80, 80, 1071, 80, 897, 1028, 326, 1030, 1031,
	1032, 687, 597, 438, 868, 869, 870, 871, 1015, 1016,
	237, 238, 498, 312, 231, 245, 1361, 80, 933, 1359,
	879, 880, 881, 58, 1035, 1353, 932, 1350, 1339, 1286,
	232, 1285, 195, 1239, 984, 477, 705, 722, 500, 1294,
	1058, 80, 1226, 712, 1044, 464, 60, 62, 608, 1281,
	55, 1, 481, 464, 1348, 1335, 1068, 1315, 1337, 1351,
	1280, 1313, 21, 894, 464, 464, 464, 464, 464, 464,
	464, 464, 1041, 1074, 903, 1310, 1079, 1262, 464, 464,
	1139, 80, 80, 851, 1080, 1111, 806, 1098, 842, 432,
	1097, 896, 806, 898, 1114, 778, 780, 68, 742, 1085,
	1301, 917, 1116, 850, 849, 1269, 1224, 861, 741, 1105,
	80, 796, 80, 80, 1121, 1119, 1023, 864, 1146, 1305,
	1020, 631, 629, 630, 628, 1120, 633, 1133, 1138, 632,
	627, 206, 326, 326, 326, 326, 319, 326, 1137, 195,
	1142, 821, 596, 1132, 620, 326, 889, 80, 501, 51,
	1155, 1156, 70, 1061, 1060, 899, 473, 208, 537, 931,
	80, 195, 1004, 325, 555, 1333, 718, 80, 1082, 1083,
	490, 1284, 1238, 967, 80, 507, 564, 195, 792, 257,
	1165, 1099, 1100, 733, 1102, 1103, 270, 267, 1175, 269,
	1168, 268, 724, 313, 313, 313, 313, 313, 976, 511,
	255, 1177, 1172, 1170, 247, 311, 1173, 580, 599, 1185,
	826, 324, 588, 586, 585, 990, 986, 313, 310, 1075,
	1178, 1199, 1291, 728, 845, 26, 80, 59, 80, 80,
	80, 195, 80, 242, 19, 18, 1203, 17, 80, 1214,
	1215, 1216, 20, 16, 15, 14, 80, 488, 492, 326,
	1211, 1217, 30, 13, 1010, 621, 12, 1223, 11, 10,
	312, 9, 1219, 8, 510, 7, 80, 80, 80, 6,
	5, 4, 233, 1227, 23, 1229, 2, 195, 0, 0,
	0, 0, 0, 0, 1234, 1233, 0, 0, 464, 0,
	464, 0, 0, 0, 0, 0, 0, 1240, 464, 554,
	0, 0, 1180, 1040, 0, 0, 0, 0, 565, 80,
	80, 0, 0, 949, 0, 741, 0, 950, 1237, 1250,
	1114, 0, 80, 0, 954, 955, 956, 0, 1067, 1252,
	1261, 0, 1267, 965, 0, 0, 80, 0, 971, 0,
	972, 973, 974, 975, 0, 0, 0, 1278, 0, 0,
	941, 1274, 0, 1275, 0, 1295, 0, 80, 0, 0,
	0, 0, 0, 0, 0, 0, 326, 1114, 1299, 0,
	0, 0, 0, 0, 326, 1296, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 326, 326, 326, 326, 326,
	326, 326, 326, 0, 0, 0, 1318, 0, 80, 326,
	326, 0, 1323, 806, 0, 195, 0, 0, 0, 0,
	980, 981, 0, 80, 1242, 1243, 1329, 1244, 1245, 1246,
	0, 0, 0, 0, 0, 0, 725, 0, 0, 0,
	1193, 484, 0, 1345, 1344, 80, 507, 1347, 313, 326,
	0, 0, 845, 0, 80, 0, 1327, 0, 0, 0,
	0, 0, 0, 1197, 0, 1356, 0, 1182, 1183, 0,
	1184, 0, 0, 1186, 0, 1188, 0, 518, 517, 527,
	528, 520, 521, 522, 523, 524, 525, 526, 519, 0,
	773, 529, 0, 0, 0, 0, 0, 0, 0, 0,
	787, 787, 1043, 710, 1084, 0, 787, 0, 0, 0,
	464, 0, 0, 0, 0, 0, 0, 484, 0, 0,
	0, 1222, 0, 787, 204, 0, 0, 0, 731, 732,
	0, 0, 0, 0, 0, 464, 518, 517, 527, 528,
	520, 521, 522, 523, 524, 525, 526, 519, 215, 1078,
	529, 1130, 326, 518, 517, 527, 528, 520, 521, 522,
	523, 524, 525, 526, 519, 326, 0, 529, 0, 0,
	0, 1101, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 554, 0, 0, 784, 785, 0, 1232, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1115, 199, 51,
	1371, 0, 0, 0, 0, 201, 0, 0, 0, 0,
	0, 0, 207, 203, 1127, 1128, 1129, 0, 845, 326,
	845, 326, 0, 0, 0, 0, 0, 0, 0, 326,
	0, 0, 1179, 0, 0, 0, 0, 0, 0, 1181,
	205, 0, 0, 209, 0, 839, 0, 0, 0, 0,
	1190, 1191, 1192, 0, 0, 1195, 326, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1205, 1206,
	1207, 200, 1210, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1078, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 489, 0, 313, 0, 0, 210, 202,
	0, 211, 212, 213, 214, 218, 0, 0, 0, 0,
	217, 216, 517, 527, 528, 520, 521, 522, 523, 524,
	525, 526, 519, 1198, 0, 529, 0, 0, 0, 193,
	0, 0, 219, 0, 1194, 0, 0, 0, 0, 0,
	926, 927, 0, 492, 0, 0, 845, 0, 0, 0,
	0, 0, 1247, 0, 0, 0, 0, 246, 0, 193,
	193, 0, 0, 0, 0, 193, 999, 1258, 1259, 1260,
	0, 0, 0, 0, 0, 1043, 845, 0, 0, 0,
	0, 0, 0, 326, 464, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1287, 1288, 1289, 1290, 0,
	0, 0, 0, 0, 0, 953, 0, 518, 517, 527,
	528, 520, 521, 522, 523, 524, 525, 526, 519, 0,
	970, 529, 0, 1115, 0, 0, 1253, 0, 0, 0,
	1039, 326, 0, 326, 527, 528, 520, 521, 522, 523,
	524, 525, 526, 519, 1319, 0, 529, 0, 0, 1324,
	0, 0, 0, 0, 0, 1279, 326, 0, 0, 0,
	0, 0, 0, 1330, 0, 0, 0, 0, 0, 0,
	1115, 0, 51, 0, 0, 0, 0, 193, 0, 193,
	326, 0, 0, 0, 1081, 193, 0, 0, 648, 0,
	0, 0, 193, 0, 0, 0, 0, 0, 0, 0,
	1358, 0, 326, 0, 518, 517, 527, 528, 520, 521,
	522, 523, 524, 525, 526, 519, 0, 787, 529, 0,
	1118, 999, 0, 787, 1373, 1374, 0, 0, 0, 0,
	0, 0, 1334, 948, 518, 517, 527, 528, 520, 521,
	522, 523, 524, 525, 526, 519, 0, 1070, 529, 326,
	0, 326, 1141, 518, 517, 527, 528, 520, 521, 522,
	523, 524, 525, 526, 519, 636, 0, 529, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1369, 0, 1169, 0, 0, 0,
	0, 0, 0, 0, 0, 1107, 0, 649, 0, 1171,
	193, 0, 0, 0, 0, 0, 1174, 193, 604, 193,
	1122, 1123, 0, 326, 1124, 0, 0, 1126, 662, 663,
	664, 665, 666, 667, 668, 0, 669, 670, 671, 672,
	673, 650, 651, 652, 653, 634, 635, 0, 0, 637,
	0, 638, 639, 640, 641, 642, 643, 644, 645, 646,
	647, 654, 655, 656, 657, 658, 659, 660, 661, 0,
	0, 0, 0, 0, 0, 1213, 0, 1213, 1213, 1213,
	513, 1218, 516, 0, 0, 0, 0, 326, 530, 531,
	532, 533, 534, 535, 536, 1213, 514, 515, 512, 518,
	517, 527, 528, 520, 521, 522, 523, 524, 525, 526,
	519, 0, 0, 529, 0, 326, 326, 326, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1201, 0, 193, 193, 0, 0,
	193, 554, 0, 193, 0, 0, 0, 693, 1254, 1255,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1141, 0, 0, 0, 0, 0, 0, 0, 0,
	193, 0, 0, 0, 0, 1213, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 193, 0, 1298, 0, 0, 0,
	0, 0, 0, 693, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 787, 0, 0, 1325, 0, 0,
	0, 0, 0, 0, 0, 246, 0, 0, 0, 0,
	246, 246, 1332, 0, 788, 788, 246, 0, 0, 0,
	788, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	246, 246, 246, 246, 1118, 193, 0, 788, 193, 193,
	193, 193, 193, 1213, 0, 0, 0, 0, 0, 0,
	820, 0, 0, 193, 0, 0, 0, 604, 0, 0,
	0, 0, 193, 193, 0, 0, 0, 0, 0, 0,
	0, 1317, 554, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	193, 0, 0, 0, 0, 0, 0, 0, 0, 193,
	0, 0, 193, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 133, 0, 193,
	0, 922, 923, 0, 0, 0, 100, 0, 0, 0,
	693, 0, 115, 0, 117, 0, 0, 151, 126, 0,
	0, 0, 246, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 79, 0, 0, 0,
	0, 0, 0, 0, 0, 92, 0, 0, 0, 0,
	72, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 246,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 246, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 75,
	76, 0, 71, 0, 0, 0, 77, 139, 0, 0,
	154, 106, 105, 144, 114, 0, 0, 0, 95, 0,
	146, 135, 166, 193, 136, 145, 118, 158, 140, 165,
	73, 173, 156, 172, 82, 155, 164, 93, 148, 84,
	162, 153, 124, 110, 111, 83, 0, 143, 99, 104,
	98, 132, 159, 160, 96, 180, 87, 171, 86, 88,
	170, 131, 157, 163, 125, 122, 85, 161, 123, 121,
	113, 101, 107, 137, 120, 138, 108, 128, 127, 129,
	0, 0, 0, 152, 168, 181, 90, 0, 0, 174,
	175, 176, 177, 0, 0, 91, 130, 89, 109, 149,
	112, 119, 142, 179, 134, 147, 94, 167, 150, 0,
	74, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 193, 81, 0, 116, 178,
	141, 102, 169, 0, 0, 246, 0, 103, 97, 0,
	0, 0, 0, 0, 0, 0, 246, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 693, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 788, 0, 0, 0, 0, 0, 788, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 193, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 193, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	193, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 604, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	193, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 413, 403, 0, 374, 416,
	352, 366, 424, 367, 368, 396, 338, 382, 133, 364,
	0, 355, 333, 361, 334, 353, 376, 100, 379, 351,
	405, 386, 415, 115, 422, 117, 391, 0, 151, 126,
	0, 0, 378, 407, 380, 401, 373, 397, 343, 390,
	417, 365, 394, 418, 0, 0, 0, 79, 0, 846,
	847, 0, 0, 0, 0, 0, 92, 0, 393, 412,
	363, 395, 332, 392, 0, 336, 339, 423, 410, 358,
	359, 1011, 0, 0, 0, 0, 0, 0, 377, 381,
	398, 371, 0, 0, 0, 0, 0, 0, 0, 0,
	356, 0, 389, 0, 0, 0, 340, 337, 788, 0,
	375, 0, 0, 0, 342, 0, 357, 399, 193, 331,
	402, 408, 372, 196, 411, 370, 369, 414, 139, 0,
	0, 154, 106, 105, 144, 114, 406, 354, 362, 95,
	360, 146, 135, 166, 388, 136, 145, 118, 158, 140,
	165, 197, 173, 156, 172, 82, 155, 164, 93, 148,
	84, 162, 153, 124, 110, 111, 83, 0, 143, 99,
	104, 98, 132, 159, 160, 96, 180, 87, 171, 86,
	88, 170, 131, 157, 163, 125, 122, 85, 161, 123,
	121, 113, 101, 107, 137, 120, 138, 108, 128, 127,
	129, 0, 335, 0, 152, 168, 181, 90, 350, 409,
	174, 175, 176, 177, 0, 0, 91, 130, 89, 109,
	149, 112, 119, 142, 179, 134, 147, 94, 167, 150,
	346, 349, 344, 345, 383, 384, 419, 420, 421, 400,
	341, 0, 347, 348, 0, 404, 387, 81, 0, 116,
	178, 141, 102, 169, 425, 426, 427, 428, 103, 97,
	429, 430, 385, 431, 413, 403, 0, 374, 416, 352,
	366, 424, 367, 368, 396, 338, 382, 133, 364, 0,
	355, 333, 361, 334, 353, 376, 100, 379, 351, 405,
	386, 415, 115, 422, 117, 391, 0, 151, 126, 0,
	0, 378, 407, 380, 401, 373, 397, 343, 390, 417,
	365, 394, 418, 0, 0, 0, 79, 0, 846, 847,
	0, 0, 0, 0, 0, 92, 0, 393, 412, 363,
	395, 332, 392, 0, 336, 339, 423, 410, 358, 359,
	0, 0, 0, 0, 0, 0, 0, 377, 381, 398,
	371, 0, 0, 0, 0, 0, 0, 0, 0, 356,
	0, 389, 0, 0, 0, 340, 337, 0, 0, 375,
	0, 0, 0, 342, 0, 357, 399, 0, 331, 402,
	408, 372, 196, 411, 370, 369, 414, 139, 0, 0,
	154, 106, 105, 144, 114, 406, 354, 362, 95, 360,
	146, 135, 166, 388, 136, 145, 118, 158, 140, 165,
	197, 173, 156, 172, 82, 155, 164, 93, 148, 84,
	162, 153, 124, 110, 111, 83, 0, 143, 99, 104,
	98, 132, 159, 160, 96, 180, 87, 171, 86, 88,
	170, 131, 157, 163, 125, 122, 85, 161, 123, 121,
	113, 101, 107, 137, 120, 138, 108, 128, 127, 129,
	0, 335, 0, 152, 168, 181, 90, 350, 409, 174,
	175, 176, 177, 0, 0, 91, 130, 89, 109, 149,
	112, 119, 142, 179, 134, 147, 94, 167, 150, 346,
	349, 344, 345, 383, 384, 419, 420, 421, 400, 341,
	0, 347, 348, 0, 404, 387, 81, 0, 116, 178,
	141, 102, 169, 425, 426, 427, 428, 103, 97, 429,
	430, 385, 431, 413, 403, 0, 374, 416, 352, 366,
	424, 367, 368, 396, 338, 382, 133, 364, 0, 355,
	333, 361, 334, 353, 376, 100, 379, 351, 405, 386,
	415, 115, 422, 117, 391, 0, 151, 126, 0, 0,
	378, 407, 380, 401, 373, 397, 343, 390, 417, 365,
	394, 418, 54, 0, 0, 79, 0, 0, 0, 0,
	0, 0, 0, 0, 92, 0, 393, 412, 363, 395,
	332, 392, 0, 336, 339, 423, 410, 358, 359, 0,
	0, 0, 0, 0, 0, 0, 377, 381, 398, 371,
	0, 0, 0, 0, 0, 0, 0, 0, 356, 0,
	389, 0, 0, 0, 340, 337, 0, 0, 375, 0,
	0, 0, 342, 0, 357, 399, 0, 331, 402, 408,
	372, 196, 411, 370, 369, 414, 139, 0, 0, 154,
	106, 105, 144, 114, 406, 354, 362, 95, 360, 146,
	135, 166, 388, 136, 145, 118, 158, 140, 165, 197,
	173, 156, 172, 82, 155, 164, 93, 148, 84, 162,
	153, 124, 110, 111, 83, 0, 143, 99, 104, 98,
	132, 159, 160, 96, 180, 87, 171, 86, 88, 170,
	131, 157, 163, 125, 122, 85, 161, 123, 121, 113,
	101, 107, 137, 120, 138, 108, 128, 127, 129, 0,
	335, 0, 152, 168, 181, 90, 350, 409, 174, 175,
	176, 177, 0, 0, 91, 130, 89, 109, 149, 112,
	119, 142, 179, 134, 147, 94, 167, 150, 346, 349,
	344, 345, 383, 384, 419, 420, 421, 400, 341, 0,
	347, 348, 0, 404, 387, 81, 0, 116, 178, 141,
	102, 169, 425, 426, 427, 428, 103, 97, 429, 430,
	385, 431, 413, 403, 0, 374, 416, 352, 366, 424,
	367, 368, 396, 338, 382, 133, 364, 0, 355, 333,
	361, 334, 353, 376, 100, 379, 351, 405, 386, 415,
	115, 422, 117, 391, 0, 151, 126, 0, 0, 378,
	407, 380, 401, 373, 397, 343, 390, 417, 365, 394,
	418, 0, 0, 0, 79, 0, 0, 0, 0, 0,
	0, 0, 0, 92, 0, 393, 412, 363, 395, 332,
	392, 0, 336, 339, 423, 410, 358, 359, 0, 0,
	0, 0, 0, 0, 0, 377, 381, 398, 371, 0,
	0, 0, 0, 0, 0, 1077, 0, 356, 0, 389,
	0, 0, 0, 340, 337, 0, 0, 375, 0, 0,
	0, 342, 0, 357, 399, 0, 331, 402, 408, 372,
	196, 411, 370, 369, 414, 139, 0, 0, 154, 106,
	105, 144, 114, 406, 354, 362, 95, 360, 146, 135,
	166, 388, 136, 145, 118, 158, 140, 165, 197, 173,
	156, 172, 82, 155, 164, 93, 148, 84, 162, 153,
	124, 110, 111, 83, 0, 143, 99, 104, 98, 132,
	159, 160, 96, 180, 87, 171, 86, 88, 170, 131,
	157, 163, 125, 122, 85, 161, 123, 121, 113, 101,
	107, 137, 120, 138, 108, 128, 127, 129, 0, 335,
	0, 152, 168, 181, 90, 350, 409, 174, 175, 176,
	177, 0, 0, 91, 130, 89, 109, 149, 112, 119,
	142, 179, 134, 147, 94, 167, 150, 346, 349, 344,
	345, 383, 384, 419, 420, 421, 400, 341, 0, 347,
	348, 0, 404, 387, 81, 0, 116, 178, 141, 102,
	169, 425, 426, 427, 428, 103, 97, 429, 430, 385,
	431, 413, 403, 0, 374, 416, 352, 366, 424, 367,
	368, 396, 338, 382, 133, 364, 0, 355, 333, 361,
	334, 353, 376, 100, 379, 351, 405, 386, 415, 115,
	422, 117, 391, 0, 151, 126, 0, 0, 378, 407,
	380, 401, 373, 397, 343, 390, 417, 365, 394, 418,
	0, 0, 0, 251, 0, 0, 0, 0, 0, 0,
	0, 0, 92, 0, 393, 412, 363, 395, 332, 392,
	0, 336, 339, 423, 410, 358, 359, 0, 0, 0,
	0, 0, 0, 0, 377, 381, 398, 371, 0, 0,
	0, 0, 0, 0, 739, 0, 356, 0, 389, 0,
	0, 0, 340, 337, 0, 0, 375, 0, 0, 0,
	342, 0, 357, 399, 0, 331, 402, 408, 372, 196,
	411, 370, 369, 414, 139, 0, 0, 154, 106, 105,
	144, 114, 406, 354, 362, 95, 360, 146, 135, 166,
	388, 136, 145, 118, 158, 140, 165, 197, 173, 156,
	172, 82, 155, 164, 93, 148, 84, 162, 153, 124,
	110, 111, 83, 0, 143, 99, 104, 98, 132, 159,
	160, 96, 180, 87, 171, 86, 88, 170, 131, 157,
	163, 125, 122, 85, 161, 123, 121, 113, 101, 107,
	137, 120, 138, 108, 128, 127, 129, 0, 335, 0,
	152, 168, 181, 90, 350, 409, 174, 175, 176, 177,
	0, 0, 91, 130, 89, 109, 149, 112, 119, 142,
	179, 134, 147, 94, 167, 150, 346, 349, 344, 345,
	383, 384, 419, 420, 421, 400, 341, 0, 347, 348,
	0, 404, 387, 81, 0, 116, 178, 141, 102, 169,
	425, 426, 427, 428, 103, 97, 429, 430, 385, 431,
	413, 403, 0, 374, 416, 352, 366, 424, 367, 368,
	396, 338, 382, 133, 364, 0, 355, 333, 361, 334,
	353, 376, 100, 379, 351, 405, 386, 415, 115, 422,
	117, 391, 0, 151, 126, 0, 0, 378, 407, 380,
	401, 373, 397, 343, 390, 417, 365, 394, 418, 0,
	0, 0, 79, 0, 0, 0, 0, 0, 0, 0,
	0, 92, 0, 393, 412, 363, 395, 332, 392, 0,
	336, 339, 423, 410, 358, 359, 0, 0, 0, 0,
	0, 0, 0, 377, 381, 398, 371, 0, 0, 0,
	0, 0, 0, 0, 0, 356, 0, 389, 0, 0,
	0, 340, 337, 0, 0, 375, 0, 0, 0, 342,
	0, 357, 399, 0, 331, 402, 408, 372, 196, 411,
	370, 369, 414, 139, 0, 0, 154, 106, 105, 144,
	114, 406, 354, 362, 95, 360, 146, 135, 166, 388,
	136, 145, 118, 158, 140, 165, 197, 173, 156, 172,
	82, 155, 164, 93, 148, 84, 162, 153, 124, 110,
	111, 83, 0, 143, 99, 104, 98, 132, 159, 160,
	96, 180, 87, 171, 86, 88, 170, 131, 157, 163,
	125, 122, 85, 161, 123, 121, 113, 101, 107, 137,
	120, 138, 108, 128, 127, 129, 0, 335, 0, 152,
	168, 181, 90, 350, 409, 174, 175, 176, 177, 0,
	0, 91, 130, 89, 109, 149, 112, 119, 142, 179,
	134, 147, 94, 167, 150, 346, 349, 344, 345, 383,
	384, 419, 420, 421, 400, 341, 0, 347, 348, 0,
	404, 387, 81, 0, 116, 178, 141, 102, 169, 425,
	426, 427, 428, 103, 97, 429, 430, 385, 431, 413,
	403, 0, 374, 416, 352, 366, 424, 367, 368, 396,
	338, 382, 133, 364, 0, 355, 333, 361, 334, 353,
	376, 100, 379, 351, 405, 386, 415, 115, 422, 117,
	391, 0, 151, 126, 0, 0, 378, 407, 380, 401,
	373, 397, 343, 390, 417, 365, 394, 418, 0, 0,
	0, 251, 0, 0, 0, 0, 0, 0, 0, 0,
	92, 0, 393, 412, 363, 395, 332, 392, 0, 336,
	339, 423, 410, 358, 359, 0, 0, 0, 0, 0,
	0, 0, 377, 381, 398, 371, 0, 0, 0, 0,
	0, 0, 0, 0, 356, 0, 389, 0, 0, 0,
	340, 337, 0, 0, 375, 0, 0, 0, 342, 0,
	357, 399, 0, 331, 402, 408, 372, 196, 411, 370,
	369, 414, 139, 0, 0, 154, 106, 105, 144, 114,
	406, 354, 362, 95, 360, 146, 135, 166, 388, 136,
	145, 118, 158, 140, 165, 197, 173, 156, 172, 82,
	155, 164, 93, 148, 84, 162, 153, 124, 110, 111,
	83, 0, 143, 99, 104, 98, 132, 159, 160, 96,
	180, 87, 171, 86, 88, 170, 131, 157, 163, 125,
	122, 85, 161, 123, 121, 113, 101, 107, 137, 120,
	138, 108, 128, 127, 129, 0, 335, 0, 152, 168,
	181, 90, 350, 409, 174, 175, 176, 177, 0, 0,
	91, 130, 89, 109, 149, 112, 119, 142, 179, 134,
	147, 94, 167, 150, 346, 349, 344, 345, 383, 384,
	419, 420, 421, 400, 341, 0, 347, 348, 0, 404,
	387, 81, 0, 116, 178, 141, 102, 169, 425, 426,
	427, 428, 103, 97, 429, 430, 385, 431, 413, 403,
	0, 374, 416, 352, 366, 424, 367, 368, 396, 338,
	382, 133, 364, 0, 355, 333, 361, 334, 353, 376,
	100, 379, 351, 405, 386, 415, 115, 422, 117, 391,
	0, 151, 126, 0, 0, 378, 407, 380, 401, 373,
	397, 343, 390, 417, 365, 394, 418, 0, 0, 0,
	79, 0, 0, 0, 0, 0, 0, 0, 0, 92,
	0, 393, 412, 363, 395, 332, 392, 0, 336, 339,
	423, 410, 358, 359, 0, 0, 0, 0, 0, 0,
	0, 377, 381, 398, 371, 0, 0, 0, 0, 0,
	0, 0, 0, 356, 0, 389, 0, 0, 0, 340,
	337, 0, 0, 375, 0, 0, 0, 342, 0, 357,
	399, 0, 331, 402, 408, 372, 196, 411, 370, 369,
	414, 139, 0, 0, 154, 106, 105, 144, 114, 406,
	354, 362, 95, 360, 146, 135, 166, 388, 136, 145,
	118, 158, 140, 165, 197, 173, 156, 172, 82, 155,
	164, 93, 148, 84, 162, 153, 124, 110, 111, 83,
	0, 143, 99, 104, 98, 132, 159, 160, 96, 180,
	87, 171, 86, 329, 170, 131, 157, 163, 125, 122,
	85, 161, 123, 121, 113, 101, 107, 137, 120, 138,
	108, 128, 127, 129, 0, 335, 0, 152, 168, 181,
	90, 350, 409, 174, 175, 176, 177, 0, 0, 91,
	330, 328, 109, 149, 112, 119, 142, 179, 134, 147,
	94, 167, 150, 346, 349, 344, 345, 383, 384, 419,
	420, 421, 400, 341, 0, 347, 348, 0, 404, 387,
	81, 0, 116, 178, 141, 102, 169, 425, 426, 427,
	428, 103, 97, 429, 430, 385, 431, 413, 403, 0,
	374, 416, 352, 366, 424, 367, 368, 396, 338, 382,
	133, 364, 0, 355, 333, 361, 334, 353, 376, 100,
	379, 351, 405, 386, 415, 115, 422, 117, 391, 0,
	151, 126, 0, 0, 378, 407, 380, 401, 373, 397,
	343, 390, 417, 365, 394, 418, 0, 0, 0, 194,
	0, 0, 0, 0, 0, 0, 0, 0, 92, 0,
	393, 412, 363, 395, 332, 392, 0, 336, 339, 423,
	410, 358, 359, 0, 0, 0, 0, 0, 0, 0,
	377, 381, 398, 371, 0, 0, 0, 0, 0, 0,
	0, 0, 356, 0, 389, 0, 0, 0, 340, 337,
	0, 0, 375, 0, 0, 0, 342, 0, 357, 399,
	0, 331, 402, 408, 372, 196, 411, 370, 369, 414,
	139, 0, 0, 154, 106, 105, 144, 114, 406, 354,
	362, 95, 360, 146, 135, 166, 388, 136, 145, 118,
	158, 140, 165, 197, 173, 156, 172, 82, 155, 164,
	93, 148, 84, 162, 153, 124, 110, 111, 83, 0,
	143, 99, 104, 98, 132, 159, 160, 96, 180, 87,
	171, 86, 88, 170, 131, 157, 163, 125, 122, 85,
	161, 123, 121, 113, 101, 107, 137, 120, 138, 108,
	128, 127, 129, 0, 335, 0, 152, 168, 181, 90,
	350, 409, 174, 175, 176, 177, 0, 0, 91, 130,
	89, 109, 149, 112, 119, 142, 179, 134, 147, 94,
	167, 150, 346, 349, 344, 345, 383, 384, 419, 420,
	421, 400, 341, 0, 347, 348, 0, 404, 387, 81,
	0, 116, 178, 141, 102, 169, 425, 426, 427, 428,
	103, 97, 429, 430, 385, 431, 413, 403, 0, 374,
	416, 352, 366, 424, 367, 368, 396, 338, 382, 133,
	364, 0, 355, 333, 361, 334, 353, 376, 100, 379,
	351, 405, 386, 415, 115, 422, 117, 391, 0, 151,
	126, 0, 0, 378, 407, 380, 401, 373, 397, 343,
	390, 417, 365, 394, 418, 0, 0, 0, 79, 0,
	0, 0, 0, 0, 0, 0, 0, 92, 0, 393,
	412, 363, 395, 332, 392, 0, 336, 339, 423, 410,
	358, 359, 0, 0, 0, 0, 0, 0, 0, 377,
	381, 398, 371, 0, 0, 0, 0, 0, 0, 0,
	0, 356, 0, 389, 0, 0, 0, 340, 337, 0,
	0, 375, 0, 0, 0, 342, 0, 357, 399, 0,
	331, 402, 408, 372, 196, 411, 370, 369, 414, 139,
	0, 0, 154, 106, 105, 144, 114, 406, 354, 362,
	95, 360, 146, 135, 166, 388, 136, 145, 118, 158,
	140, 165, 197, 173, 156, 172, 82, 155, 614, 93,
	148, 84, 162, 153, 124, 110, 111, 83, 0, 143,
	99, 104, 98, 132, 159, 160, 96, 180, 87, 171,
	86, 329, 170, 131, 157, 163, 125, 122, 85, 161,
	123, 121, 113, 101, 107, 137, 120, 138, 108, 128,
	127, 129, 0, 335, 0, 152, 168, 181, 90, 350,
	409, 174, 175, 176, 177, 0, 0, 91, 330, 328,
	109, 149, 112, 119, 142, 179, 134, 147, 94, 167,
	150, 346, 349, 344, 345, 383, 384, 419, 420, 421,
	400, 341, 0, 347, 348, 0, 404, 387, 81, 0,
	116, 178, 141, 102, 169, 425, 426, 427, 428, 103,
	97, 429, 430, 385, 431, 413, 403, 0, 374, 416,
	352, 366, 424, 367, 368, 396, 338, 382, 133, 364,
	0, 355, 333, 361, 334, 353, 376, 100, 379, 351,
	405, 386, 415, 115, 422, 117, 391, 0, 151, 126,
	0, 0, 378, 407, 380, 401, 373, 397, 343, 390,
	417, 365, 394, 418, 0, 0, 0, 79, 0, 0,
	0, 0, 0, 0, 0, 0, 92, 0, 393, 412,
	363, 395, 332, 392, 0, 336, 339, 423, 410, 358,
	359, 0, 0, 0, 0, 0, 0, 0, 377, 381,
	398, 371, 0, 0, 0, 0, 0, 0, 0, 0,
	356, 0, 389, 0, 0, 0, 340, 337, 0, 0,
	375, 0, 0, 0, 342, 0, 357, 399, 0, 331,
	402, 408, 372, 196, 411, 370, 369, 414, 139, 0,
	0, 154, 106, 105, 144, 114, 406, 354, 362, 95,
	360, 146, 135, 166, 388, 136, 145, 118, 158, 140,
	165, 197, 173, 156, 172, 82, 155, 320, 93, 148,
	84, 162, 153, 124, 110, 111, 83, 0, 143, 99,
	104, 98, 132, 159, 160, 96, 180, 87, 171, 86,
	329, 170, 131, 157, 163, 125, 122, 85, 161, 123,
	121, 113, 101, 107, 137, 120, 138, 108, 128, 127,
	129, 0, 335, 0, 152, 168, 181, 90, 350, 409,
	174, 175, 176, 177, 0, 0, 91, 330, 328, 323,
	322, 112, 119, 142, 179, 134, 147, 94, 167, 150,
	346, 349, 344, 345, 383, 384, 419, 420, 421, 400,
	341, 0, 347, 348, 0, 404, 387, 81, 0, 116,
	178, 141, 102, 169, 425, 426, 427, 428, 103, 97,
	429, 430, 385, 431, 133, 0, 0, 775, 0, 253,
	0, 0, 0, 100, 0, 250, 0, 0, 0, 115,
	293, 117, 0, 0, 151, 126, 0, 0, 0, 0,
	284, 285, 0, 0, 0, 0, 0, 0, 0, 0,
	54, 0, 0, 251, 272, 271, 274, 275, 276, 277,
	0, 0, 92, 273, 278, 279, 280, 0, 0, 248,
	265, 0, 292, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 262, 263, 244, 0, 0, 0, 304, 0,
	264, 0, 0, 259, 260, 261, 266, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 196,
	0, 0, 302, 0, 139, 0, 0, 154, 106, 105,
	144, 114, 0, 0, 0, 95, 0, 146, 135, 166,
	0, 136, 145, 118, 158, 140, 165, 197, 173, 156,
	172, 82, 155, 164, 93, 148, 84, 162, 153, 124,
	110, 111, 83, 0, 143, 99, 104, 98, 132, 159,
	160, 96, 180, 87, 171, 86, 88, 170, 131, 157,
	163, 125, 122, 85, 161, 123, 121, 113, 101, 107,
	137, 120, 138, 108, 128, 127, 129, 0, 0, 0,
	152, 168, 181, 90, 0, 0, 174, 175, 176, 177,
	0, 0, 91, 130, 89, 109, 149, 112, 119, 142,
	179, 134, 147, 94, 167, 150, 294, 303, 300, 301,
	298, 299, 297, 296, 295, 305, 286, 287, 288, 289,
	291, 0, 290, 81, 0, 116, 178, 141, 102, 169,
	0, 133, 0, 0, 103, 97, 253, 0, 0, 0,
	100, 0, 250, 0, 0, 0, 115, 293, 117, 0,
	0, 151, 126, 0, 0, 0, 0, 284, 285, 0,
	0, 0, 0, 0, 0, 0, 0, 54, 0, 484,
	251, 272, 271, 274, 275, 276, 277, 0, 0, 92,
	273, 278, 279, 280, 0, 0, 248, 265, 0, 292,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 262,
	263, 0, 0, 0, 0, 304, 0, 264, 0, 0,
	259, 260, 261, 266, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 196, 0, 0, 302,
	0, 139, 0, 0, 154, 106, 105, 144, 114, 0,
	0, 0, 95, 0, 146, 135, 166, 0, 136, 145,
	118, 158, 140, 165, 197, 173, 156, 172, 82, 155,
	164, 93, 148, 84, 162, 153, 124, 110, 111, 83,
	0, 143, 99, 104, 98, 132, 159, 160, 96, 180,
	87, 171, 86, 88, 170, 131, 157, 163, 125, 122,
	85, 161, 123, 121, 113, 101, 107, 137, 120, 138,
	108, 128, 127, 129, 0, 0, 0, 152, 168, 181,
	90, 0, 0, 174, 175, 176, 177, 0, 0, 91,
	130, 89, 109, 149, 112, 119, 142, 179, 134, 147,
	94, 167, 150, 294, 303, 300, 301, 298, 299, 297,
	296, 295, 305, 286, 287, 288, 289, 291, 0, 290,
	81, 0, 116, 178, 141, 102, 169, 0, 133, 0,
	0, 103, 97, 253, 0, 0, 0, 100, 0, 250,
	0, 0, 0, 115, 293, 117, 0, 0, 151, 126,
	0, 0, 0, 0, 284, 285, 0, 0, 0, 0,
	0, 0, 0, 0, 54, 0, 0, 251, 272, 271,
	274, 275, 276, 277, 0, 0, 92, 273, 278, 279,
	280, 0, 0, 248, 265, 0, 292, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 262, 263, 244, 0,
	0, 0, 304, 0, 264, 0, 0, 259, 260, 261,
	266, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 196, 0, 0, 302, 0, 139, 0,
	0, 154, 106, 105, 144, 114, 0, 0, 0, 95,
	0, 146, 135, 166, 0, 136, 145, 118, 158, 140,
	165, 197, 173, 156, 172, 82, 155, 164, 93, 148,
	84, 162, 153, 124, 110, 111, 83, 0, 143, 99,
	104, 98, 132, 159, 160, 96, 180, 87, 171, 86,
	88, 170, 131, 157, 163, 125, 122, 85, 161, 123,
	121, 113, 101, 107, 137, 120, 138, 108, 128, 127,
	129, 0, 0, 0, 152, 168, 181, 90, 0, 0,
	174, 175, 176, 177, 0, 0, 91, 130, 89, 109,
	149, 112, 119, 142, 179, 134, 147, 94, 167, 150,
	294, 303, 300, 301, 298, 299, 297, 296, 295, 305,
	286, 287, 288, 289, 291, 0, 290, 81, 0, 116,
	178, 141, 102, 169, 0, 133, 0, 0, 103, 97,
	253, 0, 0, 0, 100, 0, 250, 0, 0, 0,
	115, 293, 117, 0, 0, 151, 126, 0, 0, 0,
	0, 284, 285, 0, 0, 0, 0, 0, 0, 838,
	0, 54, 0, 0, 251, 272, 271, 274, 275, 276,
	277, 0, 0, 92, 273, 278, 279, 280, 0, 0,
	248, 265, 0, 292, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 262, 263, 0, 0, 0, 0, 304,
	0, 264, 0, 0, 259, 260, 261, 266, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	196, 0, 0, 302, 0, 139, 0, 0, 154, 106,
	105, 144, 114, 0, 0, 0, 95, 0, 146, 135,
	166, 0, 136, 145, 118, 158, 140, 165, 197, 173,
	156, 172, 82, 155, 164, 93, 148, 84, 162, 153,
	124, 110, 111, 83, 0, 143, 99, 104, 98, 132,
	159, 160, 96, 180, 87, 171, 86, 88, 170, 131,
	157, 163, 125, 122, 85, 161, 123, 121, 113, 101,
	107, 137, 120, 138, 108, 128, 127, 129, 0, 0,
	0, 152, 168, 181, 90, 0, 0, 174, 175, 176,
	177, 0, 0, 91, 130, 89, 109, 149, 112, 119,
	142, 179, 134, 147, 94, 167, 150, 294, 303, 300,
	301, 298, 299, 297, 296, 295, 305, 286, 287, 288,
	289, 291, 24, 290, 81, 0, 116, 178, 141, 102,
	169, 0, 0, 0, 133, 103, 97, 0, 0, 253,
	0, 0, 0, 100, 0, 250, 0, 0, 0, 115,
	293, 117, 0, 0, 151, 126, 0, 0, 0, 0,
	284, 285, 0, 0, 0, 0, 0, 0, 0, 0,
	54, 0, 0, 251, 272, 271, 274, 275, 276, 277,
	0, 0, 92, 273, 278, 279, 280, 0, 0, 248,
	265, 0, 292, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 262, 263, 0, 0, 0, 0, 304, 0,
	264, 0, 0, 259, 260, 261, 266, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 196,
	0, 0, 302, 0, 139, 0, 0, 154, 106, 105,
	144, 114, 0, 0, 0, 95, 0, 146, 135, 166,
	0, 136, 145, 118, 158, 140, 165, 197, 173, 156,
	172, 82, 155, 164, 93, 148, 84, 162, 153, 124,
	110, 111, 83, 0, 143, 99, 104, 98, 132, 159,
	160, 96, 180, 87, 171, 86, 88, 170, 131, 157,
	163, 125, 122, 85, 161, 123, 121, 113, 101, 107,
	137, 120, 138, 108, 128, 127, 129, 0, 0, 0,
	152, 168, 181, 90, 0, 0, 174, 175, 176, 177,
	0, 0, 91, 130, 89, 109, 149, 112, 119, 142,
	179, 134, 147, 94, 167, 150, 294, 303, 300, 301,
	298, 299, 297, 296, 295, 305, 286, 287, 288, 289,
	291, 0, 290, 81, 0, 116, 178, 141, 102, 169,
	0, 133, 0, 0, 103, 97, 253, 0, 0, 0,
	100, 0, 250, 0, 0, 0, 115, 293, 117, 0,
	0, 151, 126, 0, 0, 0, 0, 284, 285, 0,
	0, 0, 0, 0, 0, 0, 0, 54, 0, 0,
	251, 272, 271, 274, 275, 276, 277, 0, 0, 92,
	273, 278, 279, 280, 0, 0, 248, 265, 0, 292,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 262,
	263, 0, 0, 0, 0, 304, 0, 264, 0, 0,
	259, 260, 261, 266, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 196, 0, 0, 302,
	0, 139, 0, 0, 154, 106, 105, 144, 114, 0,
	0, 0, 95, 0, 146, 135, 166, 0, 136, 145,
	118, 158, 140, 165, 197, 173, 156, 172, 82, 155,
	164, 93, 148, 84, 162, 153, 124, 110, 111, 83,
	0, 143, 99, 104, 98, 132, 159, 160, 96, 180,
	87, 171, 86, 88, 170, 131, 157, 163, 125, 122,
	85, 161, 123, 121, 113, 101, 107, 137, 120, 138,
	108, 128, 127, 129, 0, 0, 0, 152, 168, 181,
	90, 0, 0, 174, 175, 176, 177, 0, 0, 91,
	130, 89, 109, 149, 112, 119, 142, 179, 134, 147,
	94, 167, 150, 294, 303, 300, 301, 298, 299, 297,
	296, 295, 305, 286, 287, 288, 289, 291, 133, 290,
	81, 0, 116, 178, 141, 102, 169, 100, 0, 0,
	0, 103, 97, 115, 293, 117, 0, 0, 151, 126,
	0, 0, 0, 0, 284, 285, 0, 0, 0, 0,
	0, 0, 0, 0, 54, 0, 0, 251, 272, 271,
	274, 275, 276, 277, 0, 0, 92, 273, 278, 279,
	280, 0, 0, 0, 265, 0, 292, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 262, 263, 0, 0,
	0, 0, 304, 0, 264, 0, 0, 259, 260, 261,
	266, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 196, 0, 0, 302, 0, 139, 0,
	0, 154, 106, 105, 144, 114, 0, 0, 0, 95,
	0, 146, 135, 166, 1372, 136, 145, 118, 158, 140,
	165, 197, 173, 156, 172, 82, 155, 164, 93, 148,
	84, 162, 153, 124, 110, 111, 83, 0, 143, 99,
	104, 98, 132, 159, 160, 96, 180, 87, 171, 86,
	88, 170, 131, 157, 163, 125, 122, 85, 161, 123,
	121, 113, 101, 107, 137, 120, 138, 108, 128, 127,
	129, 0, 0, 0, 152, 168, 181, 90, 0, 0,
	174, 175, 176, 177, 0, 0, 91, 130, 89, 109,
	149, 112, 119, 142, 179, 134, 147, 94, 167, 150,
	294, 303, 300, 301, 298, 299, 297, 296, 295, 305,
	286, 287, 288, 289, 291, 133, 290, 81, 0, 116,
	178, 141, 102, 169, 100, 0, 0, 0, 103, 97,
	115, 293, 117, 0, 0, 151, 126, 0, 0, 0,
	0, 284, 285, 0, 0, 0, 0, 0, 0, 0,
	0, 54, 0, 0, 251, 272, 271, 274, 275, 276,
	277, 0, 0, 92, 273, 278, 279, 280, 0, 0,
	0, 265, 0, 292, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 262, 263, 0, 0, 0, 0, 304,
	0, 264, 0, 0, 259, 260, 261, 266, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	196, 0, 0, 302, 0, 139, 0, 0, 154, 106,
	105, 144, 114, 0, 0, 0, 95, 0, 146, 135,
	166, 0, 136, 145, 118, 158, 140, 165, 197, 173,
	156, 172, 82, 155, 164, 93, 148, 84, 162, 153,
	124, 110, 111, 83, 0, 143, 99, 104, 98, 132,
	159, 160, 96, 180, 87, 171, 86, 88, 170, 131,
	157, 163, 125, 122, 85, 161, 123, 121, 113, 101,
	107, 137, 120, 138, 108, 128, 127, 129, 0, 0,
	0, 152, 168, 181, 90, 0, 0, 174, 175, 176,
	177, 0, 0, 91, 130, 89, 109, 149, 112, 119,
	142, 179, 134, 147, 94, 167, 150, 294, 303, 300,
	301, 298, 299, 297, 296, 295, 305, 286, 287, 288,
	289, 291, 133, 290, 81, 0, 116, 178, 141, 102,
	169, 100, 0, 0, 0, 103, 97, 115, 0, 117,
	0, 0, 151, 126, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 79, 0, 0, 0, 0, 0, 0, 0, 0,
	92, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 518, 517, 527, 528,
	520, 521, 522, 523, 524, 525, 526, 519, 0, 0,
	529, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 196, 0, 0,
	0, 0, 139, 0, 0, 154, 106, 105, 144, 114,
	0, 0, 0, 95, 0, 146, 135, 166, 0, 136,
	145, 118, 158, 140, 165, 197, 173, 156, 172, 82,
	155, 164, 93, 148, 84, 162, 153, 124, 110, 111,
	83, 0, 143, 99, 104, 98, 132, 159, 160, 96,
	180, 87, 171, 86, 88, 170, 131, 157, 163, 125,
	122, 85, 161, 123, 121, 113, 101, 107, 137, 120,
	138, 108, 128, 127, 129, 0, 0, 0, 152, 168,
	181, 90, 0, 0, 174, 175, 176, 177, 0, 0,
	91, 130, 89, 109, 149, 112, 119, 142, 179, 134,
	147, 94, 167, 150, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 81, 0, 116, 178, 141, 102, 169, 0, 0,
	133, 0, 103, 97, 506, 0, 0, 0, 0, 100,
	0, 0, 0, 0, 0, 115, 0, 117, 0, 0,
	151, 126, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 79,
	0, 508, 0, 0, 0, 0, 0, 0, 92, 0,
	0, 0, 0, 503, 502, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	504, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 196, 0, 0, 0, 0,
	139, 0, 0, 154, 106, 105, 144, 114, 0, 0,
	0, 95, 0, 146, 135, 166, 0, 136, 145, 118,
	158, 140, 165, 197, 173, 156, 172, 82, 155, 164,
	93, 148, 84, 162, 153, 124, 110, 111, 83, 0,
	143, 99, 104, 98, 132, 159, 160, 96, 180, 87,
	171, 86, 88, 170, 131, 157, 163, 125, 122, 85,
	161, 123, 121, 113, 101, 107, 137, 120, 138, 108,
	128, 127, 129, 0, 0, 0, 152, 168, 181, 90,
	0, 0, 174, 175, 176, 177, 0, 0, 91, 130,
	89, 109, 149, 112, 119, 142, 179, 134, 147, 94,
	167, 150, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 81,
	0, 116, 178, 141, 102, 169, 0, 0, 133, 0,
	103, 97, 603, 0, 0, 0, 0, 100, 0, 0,
	0, 0, 0, 115, 0, 117, 0, 0, 151, 126,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 194, 0, 605,
	0, 0, 0, 0, 0, 0, 92, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 196, 0, 0, 0, 0, 139, 0,
	0, 154, 106, 105, 144, 114, 0, 0, 0, 95,
	0, 146, 135, 166, 0, 136, 145, 118, 158, 140,
	165, 197, 173, 156, 172, 82, 155, 164, 93, 148,
	84, 162, 153, 124, 110, 111, 83, 0, 143, 99,
	104, 98, 132, 159, 160, 96, 180, 87, 171, 86,
	88, 170, 131, 157, 163, 125, 122, 85, 161, 123,
	121, 113, 101, 107, 137, 120, 138, 108, 128, 127,
	129, 0, 0, 0, 152, 168, 181, 90, 0, 0,
	174, 175, 176, 177, 0, 0, 91, 130, 89, 109,
	149, 112, 119, 142, 179, 134, 147, 94, 167, 150,
	0, 0, 0, 24, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 133, 0, 81, 0, 116,
	178, 141, 102, 169, 100, 0, 0, 0, 103, 97,
	115, 0, 117, 0, 0, 151, 126, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 54, 0, 0, 79, 0, 0, 0, 0, 0,
	0, 0, 0, 92, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	196, 0, 0, 0, 0, 139, 0, 0, 154, 106,
	105, 144, 114, 0, 0, 0, 95, 0, 146, 135,
	166, 0, 136, 145, 118, 158, 140, 165, 197, 173,
	156, 172, 82, 155, 164, 93, 148, 84, 162, 153,
	124, 110, 111, 83, 0, 143, 99, 104, 98, 132,
	159, 160, 96, 180, 87, 171, 86, 88, 170, 131,
	157, 163, 125, 122, 85, 161, 123, 121, 113, 101,
	107, 137, 120, 138, 108, 128, 127, 129, 0, 0,
	0, 152, 168, 181, 90, 0, 0, 174, 175, 176,
	177, 0, 0, 91, 130, 89, 109, 149, 112, 119,
	142, 179, 134, 147, 94, 167, 150, 0, 0, 0,
	24, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 133, 0, 81, 0, 116, 178, 141, 102,
	169, 100, 0, 0, 0, 103, 97, 115, 0, 117,
	0, 0, 151, 126, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 54, 0,
	0, 194, 0, 0, 0, 0, 0, 0, 0, 0,
	92, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 196, 0, 0,
	0, 0, 139, 0, 0, 154, 106, 105, 144, 114,
	0, 0, 0, 95, 0, 146, 135, 166, 0, 136,
	145, 118, 158, 140, 165, 197, 173, 156, 172, 82,
	155, 164, 93, 148, 84, 162, 153, 124, 110, 111,
	83, 0, 143, 99, 104, 98, 132, 159, 160, 96,
	180, 87, 171, 86, 88, 170, 131, 157, 163, 125,
	122, 85, 161, 123, 121, 113, 101, 107, 137, 120,
	138, 108, 128, 127, 129, 0, 0, 0, 152, 168,
	181, 90, 0, 0, 174, 175, 176, 177, 0, 0,
	91, 130, 89, 109, 149, 112, 119, 142, 179, 134,
	147, 94, 167, 150, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 133,
	0, 81, 0, 116, 178, 141, 102, 169, 100, 0,
	0, 0, 103, 97, 115, 0, 117, 0, 0, 151,
	126, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 79, 0,
	0, 726, 0, 0, 727, 0, 0, 92, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 196, 0, 0, 0, 0, 139,
	0, 0, 154, 106, 105, 144, 114, 0, 0, 0,
	95, 0, 146, 135, 166, 0, 136, 145, 118, 158,
	140, 165, 197, 173, 156, 172, 82, 155, 164, 93,
	148, 84, 162, 153, 124, 110, 111, 83, 0, 143,
	99, 104, 98, 132, 159, 160, 96, 180, 87, 171,
	86, 88, 170, 131, 157, 163, 125, 122, 85, 161,
	123, 121, 113, 101, 107, 137, 120, 138, 108, 128,
	127, 129, 0, 0, 0, 152, 168, 181, 90, 0,
	0, 174, 175, 176, 177, 0, 0, 91, 130, 89,
	109, 149, 112, 119, 142, 179, 134, 147, 94, 167,
	150, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 133, 0, 81, 0,
	116, 178, 141, 102, 169, 100, 0, 623, 0, 103,
	97, 115, 0, 117, 0, 0, 151, 126, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 79, 0, 622, 0, 0,
	0, 0, 0, 0, 92, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 196, 0, 0, 0, 0, 139, 0, 0, 154,
	106, 105, 144, 114, 0, 0, 0, 95, 0, 146,
	135, 166, 0, 136, 145, 118, 158, 140, 165, 197,
	173, 156, 172, 82, 155, 164, 93, 148, 84, 162,
	153, 124, 110, 111, 83, 0, 143, 99, 104, 98,
	132, 159, 160, 96, 180, 87, 171, 86, 88, 170,
	131, 157, 163, 125, 122, 85, 161, 123, 121, 113,
	101, 107, 137, 120, 138, 108, 128, 127, 129, 0,
	0, 0, 152, 168, 181, 90, 0, 0, 174, 175,
	176, 177, 0, 0, 91, 130, 89, 109, 149, 112,
	119, 142, 179, 134, 147, 94, 167, 150, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 81, 0, 116, 178, 141,
	102, 169, 0, 0, 133, 0, 103, 97, 603, 0,
	0, 0, 0, 100, 0, 0, 0, 0, 0, 115,
	0, 117, 0, 0, 151, 126, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 194, 0, 605, 0, 0, 0, 0,
	0, 0, 92, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 196,
	0, 0, 0, 0, 139, 0, 0, 154, 106, 105,
	144, 114, 0, 0, 0, 95, 0, 146, 135, 166,
	0, 601, 145, 118, 158, 140, 165, 197, 173, 156,
	172, 82, 155, 164, 93, 148, 84, 162, 153, 124,
	110, 111, 83, 0, 143, 99, 104, 98, 132, 159,
	160, 96, 180, 87, 171, 86, 88, 170, 131, 157,
	163, 125, 122, 85, 161, 123, 121, 113, 101, 107,
	137, 120, 138, 108, 128, 127, 129, 0, 0, 0,
	152, 168, 181, 90, 0, 0, 174, 175, 176, 177,
	0, 0, 91, 130, 89, 109, 149, 112, 119, 142,
	179, 134, 147, 94, 167, 150, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 133, 0, 81, 0, 116, 178, 141, 102, 169,
	100, 0, 0, 0, 103, 97, 115, 0, 117, 0,
	0, 151, 126, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 54, 0, 0,
	194, 0, 0, 0, 0, 0, 0, 0, 0, 92,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 196, 0, 0, 0,
	0, 139, 0, 0, 154, 106, 105, 144, 114, 0,
	0, 0, 95, 0, 146, 135, 166, 0, 136, 145,
	118, 158, 140, 165, 197, 173, 156, 172, 82, 155,
	164, 93, 148, 84, 162, 153, 124, 110, 111, 83,
	0, 143, 99, 104, 98, 132, 159, 160, 96, 180,
	87, 171, 86, 88, 170, 131, 157, 163, 125, 122,
	85, 161, 123, 121, 113, 101, 107, 137, 120, 138,
	108, 128, 127, 129, 0, 0, 0, 152, 168, 181,
	90, 0, 0, 174, 175, 176, 177, 0, 0, 91,
	130, 89, 109, 149, 112, 119, 142, 179, 134, 147,
	94, 167, 150, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 133, 0,
	81, 0, 116, 178, 141, 102, 169, 100, 0, 0,
	0, 103, 97, 115, 0, 117, 0, 0, 151, 126,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 194, 0, 605,
	0, 0, 0, 0, 0, 0, 92, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 196, 0, 0, 0, 0, 139, 0,
	0, 154, 106, 105, 144, 114, 0, 0, 0, 95,
	0, 146, 135, 166, 0, 136, 145, 118, 158, 140,
	165, 197, 173, 156, 172, 82, 155, 164, 93, 148,
	84, 162, 153, 124, 110, 111, 83, 0, 143, 99,
	104, 98, 132, 159, 160, 96, 180, 87, 171, 86,
	88, 170, 131, 157, 163, 125, 122, 85, 161, 123,
	121, 113, 101, 107, 137, 120, 138, 108, 128, 127,
	129, 0, 0, 0, 152, 168, 181, 90, 0, 0,
	174, 175, 176, 177, 0, 0, 91, 130, 89, 109,
	149, 112, 119, 142, 179, 134, 147, 94, 167, 150,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 133, 0, 81, 0, 116,
	178, 141, 102, 169, 100, 0, 0, 0, 103, 97,
	115, 0, 117, 0, 0, 151, 126, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 79, 0, 508, 0, 0, 0,
	0, 0, 0, 92, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	196, 0, 0, 0, 0, 139, 0, 0, 154, 106,
	105, 144, 114, 0, 0, 0, 95, 0, 146, 135,
	166, 0, 136, 145, 118, 158, 140, 165, 197, 173,
	156, 172, 82, 155, 164, 93, 148, 84, 162, 153,
	124, 110, 111, 83, 0, 143, 99, 104, 98, 132,
	159, 160, 96, 180, 87, 171, 86, 88, 170, 131,
	157, 163, 125, 122, 85, 161, 123, 121, 113, 101,
	107, 137, 120, 138, 108, 128, 127, 129, 0, 0,
	0, 152, 168, 181, 90, 0, 0, 174, 175, 176,
	177, 0, 0, 91, 130, 89, 109, 149, 112, 119,
	142, 179, 134, 147, 94, 167, 150, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 133, 81, 0, 116, 178, 141, 102,
	169, 581, 100, 0, 0, 103, 97, 0, 115, 0,
	117, 0, 0, 151, 126, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 194, 0, 0, 0, 0, 0, 0, 0,
	0, 92, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 196, 0,
	0, 0, 0, 139, 0, 0, 154, 106, 105, 144,
	114, 0, 0, 0, 95, 0, 146, 135, 166, 0,
	136, 145, 118, 158, 140, 165, 197, 173, 156, 172,
	82, 155, 164, 93, 148, 84, 162, 153, 124, 110,
	111, 83, 0, 143, 99, 104, 98, 132, 159, 160,
	96, 180, 87, 171, 86, 88, 170, 131, 157, 163,
	125, 122, 85, 161, 123, 121, 113, 101, 107, 137,
	120, 138, 108, 128, 127, 129, 0, 0, 0, 152,
	168, 181, 90, 0, 0, 174, 175, 176, 177, 0,
	0, 91, 130, 89, 109, 149, 112, 119, 142, 179,
	134, 147, 94, 167, 150, 0, 0, 0, 0, 0,
	0, 0, 0, 315, 0, 0, 0, 0, 0, 0,
	133, 0, 81, 0, 116, 178, 141, 102, 169, 100,
	0, 0, 0, 103, 97, 115, 0, 117, 0, 0,
	151, 126, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 194,
	0, 0, 0, 0, 0, 0, 0, 0, 92, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 196, 0, 0, 0, 0,
	139, 0, 0, 154, 106, 105, 144, 114, 0, 0,
	0, 95, 0, 146, 135, 166, 0, 136, 145, 118,
	158, 140, 165, 197, 173, 156, 172, 82, 155, 164,
	93, 148, 84, 162, 153, 124, 110, 111, 83, 0,
	143, 99, 104, 98, 132, 159, 160, 96, 180, 87,
	171, 86, 88, 170, 131, 157, 163, 125, 122, 85,
	161, 123, 121, 113, 101, 107, 137, 120, 138, 108,
	128, 127, 129, 0, 0, 0, 152, 168, 181, 90,
	0, 0, 174, 175, 176, 177, 0, 0, 91, 130,
	89, 109, 149, 112, 119, 142, 179, 134, 147, 94,
	167, 150, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 133, 0, 81,
	0, 116, 178, 141, 102, 169, 100, 0, 0, 0,
	103, 97, 115, 0, 117, 0, 0, 151, 126, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 194, 0, 0, 0,
	0, 0, 0, 0, 0, 92, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	191, 0, 196, 0, 0, 0, 0, 139, 0, 0,
	154, 106, 105, 144, 114, 0, 0, 0, 95, 0,
	146, 135, 166, 0, 136, 145, 118, 158, 140, 165,
	197, 173, 156, 172, 82, 155, 164, 93, 148, 84,
	162, 153, 124, 110, 111, 83, 0, 143, 99, 104,
	98, 132, 159, 160, 96, 180, 87, 171, 86, 88,
	170, 131, 157, 163, 125, 122, 85, 161, 123, 121,
	113, 101, 107, 137, 120, 138, 108, 128, 127, 129,
	0, 0, 0, 152, 168, 181, 90, 0, 0, 174,
	175, 176, 177, 0, 0, 91, 130, 89, 109, 149,
	112, 119, 142, 179, 134, 147, 94, 167, 150, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 133, 0, 81, 0, 116, 178,
	141, 102, 169, 100, 0, 0, 0, 103, 97, 115,
	0, 117, 0, 0, 151, 126, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 79, 0, 0, 0, 0, 0, 0,
	0, 0, 92, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 196,
	0, 0, 0, 0, 139, 0, 0, 154, 106, 105,
	144, 114, 0, 0, 0, 95, 0, 146, 135, 166,
	0, 136, 145, 118, 158, 140, 165, 197, 173, 156,
	172, 82, 155, 164, 93, 148, 84, 162, 153, 124,
	110, 111, 83, 0, 143, 99, 104, 98, 132, 159,
	160, 96, 180, 87, 171, 86, 88, 170, 131, 157,
	163, 125, 122, 85, 161, 123, 121, 113, 101, 107,
	137, 120, 138, 108, 128, 127, 129, 0, 0, 0,
	152, 168, 181, 90, 0, 0, 174, 175, 176, 177,
	0, 0, 91, 130, 89, 109, 149, 112, 119, 142,
	179, 134, 147, 94, 167, 150, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 133, 0, 81, 0, 116, 178, 141, 102, 169,
	100, 0, 0, 0, 103, 97, 115, 0, 117, 0,
	0, 151, 126, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	194, 0, 0, 0, 0, 0, 0, 0, 0, 92,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 196, 0, 0, 0,
	0, 139, 0, 0, 154, 106, 105, 144, 114, 0,
	0, 0, 95, 0, 146, 135, 166, 0, 136, 145,
	118, 158, 140, 165, 197, 173, 156, 172, 82, 155,
	164, 93, 148, 84, 162, 153, 124, 110, 111, 83,
	0, 143, 99, 104, 98, 132, 159, 160, 96, 180,
	87, 171, 86, 88, 170, 131, 157, 163, 125, 122,
	85, 161, 123, 121, 113, 101, 107, 137, 120, 138,
	108, 128, 127, 129, 0, 0, 0, 152, 168, 181,
	90, 0, 0, 174, 175, 176, 177, 0, 0, 91,
	130, 89, 109, 149, 112, 119, 142, 179, 134, 147,
	94, 167, 150, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 133, 0,
	81, 0, 116, 178, 141, 102, 169, 100, 0, 0,
	0, 103, 97, 115, 0, 117, 0, 0, 151, 126,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 251, 0, 0,
	0, 0, 0, 0, 0, 0, 92, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 196, 0, 0, 0, 0, 139, 0,
	0, 154, 106, 105, 144, 114, 0, 0, 0, 95,
	0, 146, 135, 166, 0, 136, 145, 118, 158, 140,
	165, 197, 173, 156, 172, 82, 155, 164, 93, 148,
	84, 162, 153, 124, 110, 111, 83, 0, 143, 99,
	104, 98, 132, 159, 160, 96, 180, 87, 171, 86,
	88, 170, 131, 157, 163, 125, 122, 85, 161, 123,
	121, 113, 101, 107, 137, 120, 138, 108, 128, 127,
	129, 0, 0, 0, 152, 168, 181, 90, 0, 0,
	174, 175, 176, 177, 0, 0, 91, 130, 89, 109,
	149, 112, 119, 142, 179, 134, 147, 94, 167, 150,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 81, 0, 116,
	178, 141, 102, 169, 0, 0, 0, 0, 103, 97,
}
var yyPact = [...]int{

	163, -1000, -185, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 908, 941, -1000, -1000, -1000, -1000, -1000, -1000,
	711, 2269, 95, 114, 36, 10459, 110, 1381, 10913, -1000,
	17, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -93, -98,
	-175, 699, -1000, -1000, -1000, -1000, -1000, 897, 914, 737,
	890, 785, -1000, 6080, 72, 9323, 10232, 5360, -1000, 524,
	101, 10913, -134, 10686, 70, 70, 70, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 107, 10913, -1000, 10913, 65, 522, 65, 65,
	65, 10913, -1000, 142, -1000, -1000, -1000, -1000, 10913, 519,
	847, 60, 3288, 3288, 3288, 3288, 22, 3288, -49, 734,
	923, -1000, -1000, -1000, -1000, 3288, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -181, 450,
	855, 6793, 6793, 908, -1000, 699, -1000, -1000, -1000, 831,
	-1000, -1000, 270, 927, -1000, 7712, 139, -1000, 6793, 1887,
	625, -1000, -1000, 625, -1000, -1000, 129, -1000, -1000, 7247,
	7247, 7247, 7247, 7247, 7247, 7247, 7247, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 625, -1000, 6556, 625, 625, 625, 625, 625, 625,
	625, 625, 6793, 625, 625, 625, 625, 625, 625, 625,
	625, 625, 625, 625, 625, 625, 10005, 565, 820, -1000,
	-1000, -1000, 880, 8404, 9096, 10913, 608, -1000, 666, 5101,
	-84, -1000, -1000, -1000, 207, 8858, -1000, -1000, -1000, 846,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 559, -1000, 1748, 508, 3288, 79, 713, 502,
	225, 489, 10913, 10913, 3288, 74, 10913, 878, 733, 10913,
	486, 472, -1000, 4842, -1000, 3288, 3288, 3288, 3288, 3288,
	3288, 3288, 3288, -1000, -1000, -1000, -1000, -1000, -1000, 3288,
	3288, -1000, 925, 259, -1000, -1000, 10913, 6793, -1000, -1000,
	-1000, -179, -1000, -1000, -1000, -1000, 934, 173, 492, 138,
	670, -1000, 334, 897, 450, 785, 8631, 744, -1000, -1000,
	10913, -1000, 6793, 6793, 325, -1000, 9777, -1000, -1000, 3806,
	166, 7247, 336, 265, 7247, 7247, 7247, 7247, 7247, 7247,
	7247, 7247, 7247, 7247, 7247, 7247, 7247, 7247, 7247, 392,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 443, -1000,
	699, 494, 494, 154, 154, 154, 154, 154, 154, 154,
	7474, 5606, 450, 552, 367, 6556, 6080, 6080, 6793, 6793,
	11140, 11140, 6080, 891, 220, 367, 11140, -1000, 450, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 6080, 6080, 6080, 6080,
	37, 10913, -1000, 11140, 9323, 9323, 9323, 9323, 9323, -1000,
	775, 759, -1000, 774, 773, 805, 10913, -1000, 546, 8404,
	171, 625, -1000, 9550, -1000, -1000, 37, 664, 9323, 10913,
	-1000, -1000, 4583, 666, -84, 655, -1000, -103, -74, 6317,
	149, -1000, -1000, -1000, -1000, 3029, 162, 328, -53, -1000,
	-1000, -1000, 695, -1000, 695, 695, 695, 695, -17, -17,
	-17, -17, -1000, -1000, -1000, -1000, -1000, 709, 707, -1000,
	695, 695, 695, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 706,
	706, 706, 696, 696, 725, -1000, 10913, -150, 439, 3288,
	872, 3288, -1000, 246, -1000, 10913, -1000, -1000, 10913, 3288,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 10913, 341, 10913, 10913, -1000,
	367, 415, -1000, 810, 6793, 6793, 4324, 6793, -1000, -1000,
	-1000, 855, -1000, 891, 907, -1000, 823, 819, 6080, -1000,
	-1000, 166, 253, -1000, -1000, 299, -1000, -1000, -1000, -1000,
	137, 625, -1000, 1732, -1000, -1000, -1000, -1000, 336, 7247,
	7247, 7247, 438, 1732, 1751, 1630, 1509, 154, 318, 318,
	153, 153, 153, 153, 153, 601, 601, -1000, -1000, -1000,
	450, -1000, -1000, -1000, 450, 6080, 665, -1000, -1000, 6793,
	-1000, 450, 543, 543, 381, 407, 674, -1000, 136, 673,
	543, 6080, 287, -1000, 6793, 450, -1000, 543, 450, 543,
	543, 825, 625, -1000, 638, -1000, 193, 820, 705, 732,
	793, -1000, -1000, -1000, -1000, 747, -1000, 746, -1000, -1000,
	-1000, -1000, -1000, 90, 89, 85, 10686, -1000, 922, 9323,
	621, -1000, -1000, 655, -84, -111, -1000, -1000, -1000, 367,
	-1000, 437, 641, 2770, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 701, 436, -1000, 860, 202, 187, 433, 859, -1000,
	-1000, 849, -1000, 240, -61, -1000, -1000, 348, -17, -17,
	-1000, -1000, 149, 845, 149, 149, 149, 414, 414, -1000,
	-1000, -1000, -1000, 347, -1000, -1000, -1000, 339, -1000, 731,
	10686, 3288, -1000, 4065, -1000, -1000, -1000, -1000, -1000, -1000,
	282, 201, 223, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 35, -1000, 3288, -1000, 259, -1000,
	409, 6793, -1000, -1000, 867, 795, 367, 367, 128, -1000,
	-1000, 10913, -1000, -1000, -1000, -1000, 611, -1000, -1000, -1000,
	3547, 6080, -1000, 438, 1732, 1702, -1000, 7247, 7247, -1000,
	-1000, 543, 6080, 367, -1000, -1000, -1000, 61, 392, 61,
	7247, 7247, 4324, 7247, 7247, -145, 660, 188, -1000, 6793,
	394, -1000, -1000, -1000, -1000, -1000, 728, 11140, 625, -1000,
	8177, 10686, 908, 11140, 6793, 6793, -1000, -1000, 6793, 700,
	-1000, 6793, -1000, -1000, -1000, 625, 625, 625, 517, -1000,
	908, 621, -1000, -1000, -1000, -116, -106, -1000, -1000, 3029,
	-1000, 3029, 10686, 56, -1000, 430, 426, -1000, -1000, 697,
	727, 87, -1000, -1000, -1000, 470, 149, 149, -1000, 206,
	-1000, -1000, -1000, 538, -1000, 535, 633, 528, 10913, -1000,
	-1000, 632, -1000, 192, -1000, -1000, 10686, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 10686,
	10913, -1000, -1000, -1000, -1000, -1000, 10686, -1000, 341, -1000,
	367, 103, -1000, 4065, -1000, 922, 9323, -1000, -1000, 450,
	-1000, 7247, 1732, 1732, -1000, -1000, 450, 695, 695, -1000,
	695, 696, -1000, 695, 0, 695, -1, 450, 450, 1275,
	1605, -1000, 639, 1334, 625, -141, -1000, 367, 6793, -1000,
	862, 579, 561, -1000, -1000, 5843, 450, 425, 126, 517,
	897, -1000, 367, 367, 367, 10686, 367, 10686, 10686, 10686,
	7950, 10686, 897, -1000, -1000, -1000, -1000, 2770, -1000, 493,
	-1000, 695, -1000, -1000, -1000, 10686, -41, 933, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -17,
	408, -17, 300, -1000, 289, 3288, 4065, 3029, -1000, 692,
	-1000, -1000, -1000, -1000, 864, -1000, 10913, 920, 569, -1000,
	1732, -1000, -1000, 105, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 7247, 7247, -1000, 7247, 7247, 7247, 450,
	405, 367, 857, -1000, 625, -1000, -1000, 624, 10686, 10686,
	-1000, -1000, 469, -1000, 465, 465, 465, 171, -1000, -1000,
	148, 10686, -1000, 457, 159, -1000, -124, 149, -1000, 149,
	466, 458, -1000, -1000, -1000, 10686, 625, -122, 917, 913,
	-1000, -1000, 1351, 1351, 1351, 1351, 32, -1000, -1000, 930,
	-1000, 625, -1000, 699, 115, -1000, 10686, -1000, -1000, -1000,
	-1000, -1000, 148, -1000, 383, 181, 387, -1000, 51, 261,
	853, -1000, 852, -1000, -1000, -1000, -1000, -1000, 449, 34,
	-183, -161, -1000, -1000, -1000, 6793, 6793, -1000, -1000, -1000,
	-1000, 450, 54, -153, 11140, 561, 450, 10686, -1000, -1000,
	-1000, 276, -1000, -1000, 10913, -1000, 382, -1000, -1000, 713,
	447, -1000, 10686, 625, -168, -172, 912, 367, 548, -1000,
	794, -148, -156, 495, -1000, -1000, -1000, 672, -1000, -150,
	-1000, 34, 817, -1000, 10686, -166, 911, -170, 909, 376,
	-1000, 789, -1000, 10686, -1000, -1000, 31, 425, -1000, 903,
	372, -1000, 900, 369, -1000, -151, 420, 29, -1000, 366,
	-1000, 329, -1000, -154, -1000, 625, -1000, -1000, -157, 7020,
	-1000, 1351, 450, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1176, 21, 432, 1174, 1172, 1171, 1170, 1169, 1165,
	1163, 1161, 1159, 1158, 1156, 1153, 1152, 1145, 1144, 1143,
	1142, 1137, 1135, 1134, 114, 1133, 1127, 1125, 65, 1123,
	62, 1122, 1121, 40, 48, 34, 46, 915, 1119, 43,
	71, 78, 1118, 47, 1116, 1115, 63, 1114, 61, 1113,
	1112, 41, 1107, 1105, 12, 25, 1104, 1100, 1099, 1098,
	75, 120, 1092, 1091, 1089, 1087, 1086, 1083, 70, 9,
	3, 15, 14, 1079, 83, 8, 1078, 50, 1076, 1073,
	1072, 1071, 42, 1070, 58, 1066, 29, 53, 2, 11,
	1065, 55, 33, 24, 7, 69, 59, 1063, 30, 60,
	49, 1062, 1059, 338, 1058, 1057, 37, 1056, 19, 153,
	294, 1055, 1054, 1053, 1052, 35, 0, 829, 498, 64,
	1048, 1046, 1044, 1583, 57, 56, 20, 1042, 44, 311,
	31, 1036, 1031, 27, 1030, 1029, 1026, 1024, 1023, 1022,
	1021, 269, 1020, 1019, 1018, 13, 23, 1017, 1016, 51,
	17, 1007, 1006, 1005, 45, 54, 1004, 1003, 52, 1000,
	997, 989, 988, 28, 16, 983, 10, 980, 5, 977,
	26, 975, 1, 974, 18, 972, 4, 963, 6, 38,
	962, 961, 960, 959, 958, 957, 955, 954, 952, 951,
	950, 508, 442, 949, 948, 947, 76,
}
var yyR1 = [...]int{

	0, 189, 190, 190, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 6, 3, 4,
	4, 5, 5, 7, 7, 27, 27, 180, 188, 188,
	182, 182, 193, 193, 185, 185, 184, 184, 183, 183,
	181, 181, 186, 186, 187, 187, 8, 9, 9, 9,
	194, 194, 46, 46, 91, 91, 10, 10, 10, 10,
	96, 96, 100, 100, 100, 101, 101, 101, 101, 131,
	131, 11, 11, 11, 11, 11, 11, 11, 178, 178,
	177, 176, 176, 175, 175, 174, 16, 160, 161, 161,
	161, 161, 155, 134, 134, 134, 134, 137, 137, 135,
	135, 135, 135, 135, 135, 135, 136, 136, 136, 136,
	136, 138, 138, 138, 138, 138, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 140, 140, 140, 140, 140, 140, 140, 140, 154,
	154, 141, 141, 149, 149, 150, 150, 150, 147, 147,
	148, 148, 151, 151, 151, 142, 142, 142, 142, 142,
	142, 142, 144, 144, 152, 152, 145, 145, 145, 146,
	146, 153, 153, 153, 153, 153, 143, 143, 156, 156,
	169, 169, 168, 168, 168, 159, 159, 165, 165, 165,
	165, 165, 158, 158, 167, 167, 166, 157, 157, 170,
	162, 162, 162, 163, 163, 163, 164, 164, 164, 12,
	12, 12, 12, 12, 12, 12, 12, 12, 179, 179,
	179, 179, 179, 179, 179, 179, 179, 179, 179, 173,
	171, 171, 172, 172, 13, 14, 14, 14, 14, 14,
	15, 15, 17, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 107,
	107, 105, 105, 106, 106, 106, 108, 108, 108, 132,
	132, 132, 19, 19, 21, 21, 22, 23, 20, 20,
	20, 20, 20, 20, 20, 195, 24, 25, 25, 26,
	26, 26, 30, 30, 30, 28, 28, 29, 29, 35,
	35, 34, 34, 36, 36, 36, 36, 120, 120, 120,
	119, 119, 38, 38, 39, 39, 40, 40, 41, 41,
	41, 53, 53, 89, 89, 92, 92, 42, 42, 42,
	42, 43, 43, 44, 44, 45, 45, 127, 127, 126,
	126, 126, 125, 125, 47, 47, 47, 49, 48, 48,
	48, 48, 50, 50, 52, 52, 51, 51, 54, 54,
	54, 54, 55, 55, 37, 37, 37, 37, 37, 37,
	37, 104, 104, 57, 57, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 67, 67, 67, 67, 67,
	67, 58, 58, 58, 58, 58, 58, 58, 33, 33,
	68, 68, 68, 74, 69, 69, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 65, 65,
	65, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 64, 64, 64, 64,
	64, 64, 64, 64, 196, 196, 66, 66, 66, 66,
	31, 31, 31, 31, 31, 130, 130, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	78, 78, 32, 32, 76, 76, 77, 79, 79, 75,
	75, 75, 60, 60, 60, 60, 60, 60, 60, 60,
	62, 62, 62, 80, 80, 81, 81, 82, 82, 83,
	83, 84, 85, 85, 85, 86, 86, 86, 86, 87,
	87, 87, 59, 59, 59, 59, 59, 59, 90, 90,
	88, 88, 88, 88, 93, 93, 70, 70, 72, 72,
	71, 73, 94, 94, 98, 95, 95, 99, 99, 99,
	97, 97, 97, 122, 122, 122, 102, 102, 109, 109,
	110, 110, 103, 103, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 112, 112, 112, 113, 113, 114,
	114, 114, 121, 121, 117, 117, 118, 118, 123, 123,
	124, 124, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 191, 192, 128, 129,
	129, 129,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 4, 6, 7, 5, 10, 1,
	3, 1, 3, 7, 8, 1, 1, 11, 0, 1,
	0, 4, 1, 1, 0, 3, 0, 3, 0, 3,
	0, 3, 0, 3, 0, 3, 8, 8, 7, 6,
	1, 1, 1, 3, 0, 4, 3, 4, 5, 4,
	1, 3, 3, 2, 2, 2, 2, 2, 1, 1,
	1, 2, 8, 4, 6, 5, 5, 5, 0, 2,
	1, 0, 2, 1, 3, 3, 4, 4, 1, 3,
	3, 3, 8, 3, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 2,
	2, 1, 2, 2, 2, 1, 4, 4, 2, 2,
	3, 3, 3, 3, 1, 1, 1, 1, 1, 6,
	6, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 0, 3, 0, 5, 0, 3, 5, 0, 1,
	0, 1, 0, 1, 2, 0, 2, 2, 2, 2,
	2, 2, 0, 3, 0, 1, 0, 3, 3, 0,
	2, 0, 2, 1, 2, 1, 0, 2, 5, 4,
	1, 2, 2, 3, 2, 0, 1, 2, 3, 3,
	2, 2, 1, 1, 1, 3, 2, 3, 1, 10,
	0, 1, 3, 1, 2, 3, 1, 1, 1, 6,
	7, 7, 12, 7, 7, 7, 4, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 7,
	1, 3, 8, 8, 5, 4, 6, 5, 4, 4,
	3, 2, 3, 4, 4, 4, 4, 4, 4, 4,
	4, 3, 3, 3, 3, 4, 3, 7, 5, 4,
	2, 2, 4, 4, 2, 2, 2, 2, 3, 1,
	1, 0, 1, 0, 2, 2, 0, 2, 2, 0,
	1, 1, 2, 1, 1, 2, 1, 1, 2, 2,
	2, 2, 2, 3, 3, 0, 2, 0, 2, 1,
	2, 2, 0, 1, 1, 0, 1, 0, 1, 0,
	1, 1, 3, 1, 2, 3, 5, 0, 1, 2,
	1, 1, 0, 2, 1, 3, 1, 1, 1, 3,
	3, 3, 7, 1, 3, 1, 3, 4, 4, 4,
	3, 2, 4, 0, 1, 0, 2, 0, 1, 0,
	1, 2, 1, 1, 1, 2, 2, 1, 2, 3,
	2, 3, 2, 2, 2, 1, 1, 3, 0, 5,
	5, 5, 0, 2, 1, 3, 3, 2, 3, 1,
	2, 0, 3, 1, 1, 3, 3, 4, 4, 5,
	3, 4, 5, 6, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 0, 2,
	1, 1, 1, 3, 1, 3, 1, 1, 1, 1,
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 2, 2, 2, 2,
	2, 2, 2, 3, 1, 1, 1, 1, 4, 5,
	6, 4, 4, 6, 6, 6, 6, 8, 8, 6,
	8, 8, 9, 7, 5, 4, 2, 2, 2, 2,
	2, 2, 2, 2, 0, 2, 4, 4, 4, 4,
	0, 3, 4, 7, 3, 1, 1, 2, 3, 3,
	1, 2, 2, 1, 2, 1, 2, 2, 1, 2,
	0, 1, 0, 2, 1, 2, 4, 0, 2, 1,
	3, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 0, 3, 0, 2, 0, 3, 1,
	3, 2, 0, 1, 1, 0, 2, 4, 4, 0,
	2, 4, 2, 1, 3, 5, 4, 6, 0, 3,
	1, 3, 3, 5, 0, 5, 1, 3, 1, 2,
	3, 1, 1, 3, 3, 1, 3, 3, 3, 3,
	1, 2, 1, 1, 1, 1, 1, 1, 0, 2,
	0, 3, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 1, 1, 1, 1, 0,
	1, 1, 0, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 0,
	1, 1,
}
var yyChk = [...]int{

	-1000, -189, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -21, -22, -23,
	-20, -180, -3, -4, 6, 7, -27, 9, 10, 30,
	-16, 114, 115, 117, 116, 143, 118, 136, 50, 155,
	156, 158, 159, 25, 137, 138, 141, 142, 31, 32,
	260, -191, 8, 239, 54, -190, 264, -82, 15, -26,
	5, -24, -195, -24, -24, -24, -24, -24, -160, 54,
	-114, 123, 71, 151, 231, 120, 121, 127, -117, 57,
	-116, 247, 155, 166, 160, 187, 179, 177, 180, 218,
	207, 216, 66, 158, 227, 139, 175, 259, 171, 169,
	27, 192, 252, 258, 170, 133, 132, 193, 197, 219,
	164, 165, 221, 191, 135, 33, 249, 35, 147, 222,
	195, 190, 186, 189, 163, 185, 39, 199, 198, 200,
	217, 182, 172, 18, 225, 142, 145, 194, 196, 128,
	149, 251, 223, 168, 134, 146, 141, 226, 159, 220,
	229, 38, 204, 162, 131, 156, 153, 183, 148, 173,
	174, 188, 161, 184, 157, 150, 143, 228, 205, 253,
	181, 178, 154, 152, 210, 211, 212, 213, 250, 224,
	176, 206, -103, 123, 125, 121, 121, 122, 123, 231,
	120, 121, -51, -123, 57, -116, 123, 151, 121, 107,
	180, 114, 208, 122, 33, 149, -132, 121, -105, 152,
	207, 210, 211, 212, 213, 57, 220, 219, 214, -123,
	157, -128, -128, -128, -128, -128, 209, 209, 259, -2,
	-86, 17, 16, -5, -3, -191, 6, 20, 21, -30,
	40, 41, -25, -36, 98, -37, -123, -56, 73, -61,
	29, 57, -116, 23, -60, -57, -75, -73, -74, 107,
	108, 109, 96, 97, 104, 74, 110, -65, -63, -64,
	-66, 59, 58, 67, 60, 61, 62, 63, 68, 69,
	70, -117, -71, -191, 44, 45, 240, 241, 242, 243,
	246, 244, 76, 34, 230, 238, 237, 236, 234, 235,
	232, 233, 126, 231, 102, 239, -103, -39, -40, -41,
	-42, -53, -74, -191, -51, 11, -46, -51, -95, -131,
	157, -99, 220, 219, -118, -97, -117, -115, 218, 180,
	217, 119, 72, 22, 24, 202, 75, 107, 16, 76,
	106, 240, 114, 48, 232, 233, 230, 242, 243, 231,
	208, 29, 10, 25, 137, 21, 100, 116, 79, 80,
	140, 23, 138, 70, 19, 51, 11, 13, 14, 126,
	125, 91, 122, 46, 8, 110, 26, 88, 42, 28,
	44, 89, 17, 234, 235, 262, 31, 246, 144, 102,
	49, 36, 73, 68, 52, 71, 15, 47, 90, 117,
	239, 45, 120, 6, 245, 30, 136, 43, 121, 209,
	78, 124, 69, 5, 127, 32, 9, 50, 53, 236,
	237, 238, 34, 77, 12, 254, 255, 256, 257, 260,
	261, 263, -161, -155, 57, 122, -51, 239, -117, -110,
	126, -110, -110, 121, -51, -51, -109, 126, 57, -109,
	-109, -109, -51, 111, -51, 57, 30, 231, 57, 149,
	121, 150, 123, -129, -191, -118, -129, -129, -129, 153,
	154, -129, 216, -107, 209, 215, 52, 12, -129, -128,
	-128, -188, 262, -192, 56, -87, 19, 31, -37, -123,
	-83, -84, -37, -82, -2, -24, 36, -28, 21, 65,
	11, -120, 72, 71, 88, -119, 22, -117, 59, 111,
	-37, -58, 91, 73, 89, 90, 75, 93, 92, 103,
	96, 97, 98, 99, 100, 101, 102, 94, 95, 106,
	81, 82, 83, 84, 85, 86, 87, -104, -191, -74,
	-191, 112, 113, -61, -61, -61, -61, -61, -61, -61,
	-61, -191, -2, -69, -37, -191, -191, -191, -191, -191,
	-191, -191, -191, -191, -78, -37, -191, -196, -191, -196,
	-196, -196, -196, -196, -196, -196, -191, -191, -191, -191,
	-52, 26, -51, 30, 55, -47, -49, -48, -50, 42,
	46, 48, 43, 44, 45, 49, -127, 22, -39, -191,
	-126, 145, -125, 22, -123, 59, -51, -46, -194, 55,
	11, 53, 55, -95, 157, -96, -100, 221, 223, 81,
	-122, -117, 59, 29, 30, 56, 55, -134, -137, -139,
	-138, -140, -135, -136, 177, 178, 107, 181, 183, 184,
	185, 186, 187, 188, 189, 190, 191, 192, 30, 139,
	173, 174, 175, 176, 193, 194, 195, 196, 197, 198,
	199, 200, 160, 161, 162, 163, 164, 165, 166, 168,
	169, 170, 171, 172, 57, -129, 123, -178, 53, 57,
	73, 57, -51, -51, -129, 124, -51, 23, 52, -51,
	57, 57, -124, -123, -115, -129, -129, -129, -129, -129,
	-129, -129, -129, -129, -129, 11, -106, 11, 91, -51,
	-37, 261, 9, 91, 55, 18, 111, 55, -85, 24,
	25, -86, -192, -30, -62, -117, 60, 63, -29, 43,
	-51, -37, -37, -67, 68, 73, 69, 70, -119, 98,
	-124, -118, -115, -61, -68, -71, -74, 64, 91, 89,
	90, 75, -61, -61, -61, -61, -61, -61, -61, -61,
	-61, -61, -61, -61, -61, -61, -61, -130, 57, 59,
	57, -60, -60, -117, -35, 21, -34, -36, -192, 55,
	-192, -2, -34, -34, -37, -37, -75, -117, -123, -75,
	-34, -28, -76, -77, 77, -75, -192, -34, -35, -34,
	-34, -91, 145, -51, -94, -98, -75, -40, -41, -41,
	-40, -41, 42, 42, 42, 47, 42, 47, 42, -48,
	-123, -192, -54, 50, 125, 51, -191, -125, -91, 53,
	-39, -51, -99, -96, 55, 222, 224, 225, 52, -37,
	-146, 106, -162, -163, -164, -118, 59, 60, -155, -156,
	-157, -165, 130, -170, 128, 131, 127, -158, 133, 122,
	28, -151, 68, 73, -147, 205, -141, 54, -141, -141,
	-141, -141, -145, 180, -145, -145, -145, 54, 54, -141,
	-141, -141, -149, 54, -149, -149, -150, 54, -150, -121,
	53, -51, -176, 250, -177, 57, -129, 23, -129, -111,
	119, 116, 117, -173, 115, 202, 180, 66, 29, 15,
	240, 145, 253, 57, 146, -51, -51, -129, -51, -108,
	89, 12, -123, -123, 59, 38, -37, -37, -124, -84,
	-87, -102, 19, 11, 34, 34, -34, 68, 69, 70,
	111, -191, -68, -61, -61, -61, -33, 140, 72, -192,
	-192, -34, 55, -37, -192, -192, -192, 55, 53, 22,
	55, 11, 111, 55, 11, -192, -34, -79, -77, 79,
	-37, -192, -192, -192, -192, -192, -59, 30, 34, -2,
	-191, -191, -55, 55, 12, 81, -44, -43, 52, 53,
	-45, 52, -43, 42, 42, 122, 122, 122, -92, -117,
	-55, -39, -55, -100, -101, 226, 223, 229, 57, 55,
	-164, 81, 54, 57, 28, -158, -158, 57, 57, 28,
	-142, 29, 68, -148, 206, 60, -145, -145, -146, 30,
	-146, -146, -146, -154, 59, -154, 60, 60, 52, -117,
	-129, -175, -174, -118, -128, -179, 151, 129, 130, 133,
	132, 57, 122, 28, 128, 131, 145, 127, -179, 151,
	-112, -113, 124, 22, 122, 28, 145, -129, -106, 59,
	-37, 26, 39, 111, -51, -38, 11, 98, -118, -35,
	-33, 72, -61, -61, -192, -36, -133, 107, 177, 139,
	175, 171, 191, 182, 204, 173, 205, -130, -133, -61,
	-61, -118, -61, -61, 247, -82, 80, -37, 78, -93,
	52, -94, -70, -72, -71, -191, -2, -88, -117, -92,
	-82, -98, -37, -37, -37, 54, -37, -191, -191, -191,
	-192, 55, -82, -55, 223, 227, 228, -163, -164, -167,
	-166, -117, -170, 57, 57, 54, -144, 52, 59, 60,
	61, 68, 230, 67, 56, -146, -146, 57, 107, 56,
	55, 56, 55, 56, 55, -51, 55, 81, -128, -117,
	-128, -117, -51, -128, -117, -108, 121, -55, -39, -192,
	-61, -192, -141, -141, -141, -150, -141, 165, -141, 165,
	-192, -192, -192, 55, 19, -192, 55, 19, -191, -32,
	245, -37, 27, -93, 55, -192, -192, -192, 55, 111,
	-192, -86, -89, -117, -89, -89, -89, -126, -117, -86,
	56, 55, -141, -89, -152, 202, 9, -145, 59, -145,
	60, 60, -129, -174, -164, 54, 26, -51, -80, 13,
	-145, 57, -61, -61, -61, -61, -61, -192, 59, 28,
	-72, 34, -2, -191, -117, -117, 55, 56, -192, -192,
	-192, -54, -169, -168, 53, 135, 66, -166, 56, -153,
	128, 28, 127, 230, -146, -146, 56, 56, -89, -191,
	-182, -193, 258, 216, -81, 14, 16, -192, -192, -192,
	-192, -31, 91, 250, 9, -70, -2, 111, -117, -168,
	57, -159, 81, 59, 134, -143, 66, 28, 28, 56,
	-171, -172, 145, -181, 263, -185, 254, -37, -69, -192,
	248, 49, 251, -94, -192, -117, 60, -51, 59, -178,
	-192, 55, -117, -90, -191, -186, 255, -184, 257, 16,
	39, 249, 252, 54, -176, -172, 34, -88, -187, 254,
	16, -183, 256, 16, 59, 39, -89, 147, -192, 16,
	59, 16, 59, 250, 56, 148, 59, 59, 251, -191,
	252, -61, 144, -192, -192,
}
var yyDef = [...]int{

	23, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 537, 0, 305, 305, 305, 305, 305, 305,
	0, 609, 592, 0, 0, 0, 0, -2, 293, 294,
	0, 296, 297, 828, 828, 828, 828, 828, 0, 0,
	0, 0, 35, 36, 826, 1, 3, 545, 0, 0,
	309, 312, 307, 0, 592, 0, 0, 0, 81, 0,
	0, 815, 0, 816, 590, 590, 590, 610, 611, 614,
	615, 723, 724, 725, 726, 727, 728, 729, 730, 731,
	732, 733, 734, 735, 736, 737, 738, 739, 740, 741,
	742, 743, 744, 745, 746, 747, 748, 749, 750, 751,
	752, 753, 754, 755, 756, 757, 758, 759, 760, 761,
	762, 763, 764, 765, 766, 767, 768, 769, 770, 771,
	772, 773, 774, 775, 776, 777, 778, 779, 780, 781,
	782, 783, 784, 785, 786, 787, 788, 789, 790, 791,
	792, 793, 794, 795, 796, 797, 798, 799, 800, 801,
	802, 803, 804, 805, 806, 807, 808, 809, 810, 811,
	812, 813, 814, 817, 818, 819, 820, 821, 822, 823,
	824, 825, 0, 0, 593, 0, 588, 0, 588, 588,
	588, 0, 251, 376, 618, 619, 815, 816, 0, 0,
	0, 0, 829, 829, 829, 829, 0, 829, 0, 270,
	271, 274, 275, 276, 277, 829, 290, 291, 282, 292,
	295, 298, 299, 300, 301, 302, 828, 828, 38, 29,
	549, 0, 0, 537, 31, 0, 305, 310, 311, 315,
	313, 314, 306, 0, 323, 327, 0, 384, 0, 389,
	391, -2, -2, 0, 426, 427, 428, 429, 430, 0,
	0, 0, 0, 0, 0, 0, 0, 454, 455, 456,
	457, 522, 523, 524, 525, 526, 527, 528, 529, 393,
	394, 519, 571, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 510, 0, 484, 484, 484, 484, 484, 484,
	484, 484, 0, 0, 0, 0, 0, 0, 334, 336,
	337, 338, 357, 0, 359, 0, 0, 62, 66, 0,
	806, 575, -2, -2, 0, 0, 616, 617, -2, 730,
	-2, 622, 623, 624, 625, 626, 627, 628, 629, 630,
	631, 632, 633, 634, 635, 636, 637, 638, 639, 640,
	641, 642, 643, 644, 645, 646, 647, 648, 649, 650,
	651, 652, 653, 654, 655, 656, 657, 658, 659, 660,
	661, 662, 663, 664, 665, 666, 667, 668, 669, 670,
	671, 672, 673, 674, 675, 676, 677, 678, 679, 680,
	681, 682, 683, 684, 685, 686, 687, 688, 689, 690,
	691, 692, 693, 694, 695, 696, 697, 698, 699, 700,
	701, 702, 703, 704, 705, 706, 707, 708, 709, 710,
	711, 712, 713, 714, 715, 716, 717, 718, 719, 720,
	721, 722, 0, 98, 0, 0, 829, 0, 88, 0,
	0, 0, 0, 0, 829, 0, 0, 0, 0, 0,
	0, 0, 250, 0, 252, 829, 829, 829, 829, 829,
	829, 829, 829, 261, 830, 831, 262, 263, 264, 829,
	829, 266, 0, 283, 279, 280, 0, 0, 278, 303,
	304, 0, 39, 30, 827, 24, 0, 0, 546, 0,
	538, 539, 542, 545, 29, 312, 0, 317, 316, 308,
	0, 324, 0, 0, 0, 328, 0, 330, 331, 0,
	387, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	411, 412, 413, 414, 415, 416, 417, 390, 0, 404,
	0, 0, 0, 446, 447, 448, 449, 450, 451, 452,
	0, 319, 29, 0, 424, 0, 0, 0, 0, 0,
	0, 0, 0, 315, 0, 511, 0, 476, 0, 477,
	478, 479, 480, 481, 482, 483, 0, 319, 0, 0,
	64, 0, 375, 0, 0, 0, 0, 0, 0, 364,
	0, 0, 367, 0, 0, 0, 0, 358, 0, 0,
	378, 778, 360, 0, 362, 363, -2, 0, 0, 0,
	60, 61, 0, 67, 806, 69, 70, 0, 0, 0,
	179, 583, 584, 585, 581, 210, 0, 162, 158, 104,
	105, 106, 151, 108, 151, 151, 151, 151, 176, 176,
	176, 176, 134, 135, 136, 137, 138, 0, 0, 121,
	151, 151, 151, 125, 141, 142, 143, 144, 145, 146,
	147, 148, 109, 110, 111, 112, 113, 114, 115, 153,
	153, 153, 155, 155, 612, 83, 0, 91, 0, 829,
	0, 829, 96, 0, 226, 0, 245, 589, 0, 829,
	248, 249, 377, 620, 621, 253, 254, 255, 256, 257,
	258, 259, 260, 265, 269, 0, 286, 0, 0, 273,
	272, 0, 550, 0, 0, 0, 0, 0, 541, 543,
	544, 549, 32, 315, 0, 530, 0, 0, 0, 318,
	27, 385, 386, 388, 405, 0, 407, 409, 329, 325,
	0, 520, -2, 395, 396, 420, 421, 422, 0, 0,
	0, 0, 418, 400, 0, 431, 432, 433, 434, 435,
	436, 437, 438, 439, 440, 441, 442, 445, 495, 496,
	0, 443, 444, 453, 0, 0, 320, 321, 423, 0,
	570, 29, 0, 0, 0, 0, 0, 519, 0, 0,
	0, 0, 517, 514, 0, 0, 485, 0, 0, 0,
	0, 0, 0, 374, 382, 572, 0, 335, 353, 355,
	0, 350, 365, 366, 368, 0, 370, 0, 372, 373,
	339, 340, 341, 0, 0, 0, 0, 361, 382, 0,
	382, 63, 576, 68, 0, 0, 73, 74, 577, 578,
	579, 0, 97, 211, 213, 216, 217, 218, 99, 100,
	101, 0, 0, 208, 0, 0, 0, 0, 0, 202,
	203, 165, 163, 0, 160, 159, 107, 0, 176, 176,
	128, 129, 179, 0, 179, 179, 179, 0, 0, 122,
	123, 124, 116, 0, 117, 118, 119, 0, 120, 0,
	0, 829, 85, 0, 89, 90, 86, 591, 87, 828,
	0, 0, 604, 227, 594, 595, 596, 597, 598, 599,
	600, 601, 602, 603, 0, 244, 829, 247, 283, 268,
	0, 0, 284, 285, 0, 0, 547, 548, 0, 540,
	25, 0, 586, 587, 531, 532, 332, 406, 408, 410,
	0, 319, 397, 418, 401, 0, 398, 0, 0, 392,
	458, 0, 0, 425, -2, 461, 462, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 537, 0, 515, 0,
	0, 475, 486, 487, 488, 489, 564, 0, 0, -2,
	0, 0, 537, 0, 0, 0, 347, 354, 0, 0,
	348, 0, 349, 369, 371, 0, 0, 0, 0, 345,
	537, 382, 59, 71, 72, 0, 0, 78, 180, 0,
	214, 0, 0, 0, 197, 0, 0, 200, 201, 0,
	172, 0, 164, 103, 161, 0, 179, 179, 130, 0,
	131, 132, 133, 0, 149, 0, 0, 0, 0, 613,
	84, 92, 93, 0, 219, 828, 0, 228, 229, 230,
	231, 232, 233, 234, 235, 236, 237, 238, 828, 0,
	0, 828, 605, 606, 607, 608, 0, 246, 286, 287,
	288, 0, 551, 0, 26, 382, 0, 326, 521, 0,
	399, 0, 419, 402, 459, 322, 0, 151, 151, 500,
	151, 155, 503, 151, 505, 151, 508, 0, 0, 0,
	0, 520, 0, 0, 0, 512, 474, 518, 0, 33,
	0, 564, 552, 566, 568, 0, 29, 0, 560, 0,
	545, 573, 383, 574, 351, 0, 356, 0, 0, 0,
	359, 0, 545, 58, 75, 76, 77, 212, 215, 0,
	204, 151, 207, 198, 199, 0, 174, 0, 166, 167,
	168, 169, 170, 171, 152, 126, 127, 177, 178, 176,
	0, 176, 0, 156, 0, 829, 0, 0, 220, 0,
	221, 223, 224, 225, 0, 267, 0, 533, 333, 460,
	403, 463, 497, 176, 501, 502, 504, 506, 507, 509,
	465, 464, 466, 0, 0, 469, 0, 0, 0, 0,
	0, 516, 0, 34, 0, 569, -2, 0, 0, 0,
	65, 56, 0, 343, 0, 0, 0, 378, 346, 57,
	189, 0, 206, 0, 181, 175, 0, 179, 150, 179,
	0, 0, 82, 94, 95, 0, 0, 40, 535, 0,
	498, 499, 0, 0, 0, 0, 490, 473, 513, 0,
	567, 0, -2, 0, 562, 561, 0, 352, 379, 380,
	381, 342, 188, 190, 0, 195, 0, 205, 0, 186,
	0, 183, 185, 173, 139, 140, 154, 157, 0, 0,
	50, 44, 42, 43, 28, 0, 0, 467, 468, 470,
	471, 0, 0, 0, 0, 555, 29, 0, 344, 191,
	192, 0, 196, 194, 0, 102, 0, 182, 184, 88,
	0, 240, 0, 558, 52, 46, 0, 536, 534, 472,
	0, 0, 0, 565, -2, 563, 193, 0, 187, 91,
	239, 0, 0, 37, 0, 54, 0, 48, 0, 0,
	491, 0, 494, 0, 222, 241, 0, 0, 51, 0,
	0, 41, 0, 0, 45, 492, 0, 0, 559, 0,
	53, 0, 47, 0, 209, 0, 55, 49, 0, 0,
	493, 0, 0, 242, 243,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 74, 3, 3, 3, 101, 93, 3,
	54, 56, 98, 96, 55, 97, 111, 99, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 264,
	82, 81, 83, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 103, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 92, 3, 104,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 75,
	76, 77, 78, 79, 80, 84, 85, 86, 87, 88,
	89, 90, 91, 94, 95, 100, 102, 105, 106, 107,
	108, 109, 110, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:317
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:322
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:323
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:327
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:349
		{
			setParseTree(yylex, nil)
		}
	case 24:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:355
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 25:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:363
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 26:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:367
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 27:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:373
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 28:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:380
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:386
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:390
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:396
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:400
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 33:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:407
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 34:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:419
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:431
		{
			yyVAL.str = InsertStr
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:435
		{
			yyVAL.str = ReplaceStr
		}
	case 37:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:445
		{
			x := &LoadDataStmt{
				Action:  string(yyDollar[1].bytes),
				Path:    string(yyDollar[5].bytes),
				Table:   yyDollar[8].tableName,
				Columns: yyDollar[11].columns,
			}
			if yyDollar[3].str != "" {
				x.IsLocal = true
			}
			if yyDollar[9].item != nil {
				x.FieldsInfo = yyDollar[9].item.(*FieldsClause)
			}
			if yyDollar[10].item != nil {
				x.LinesInfo = yyDollar[10].item.(*LinesClause)
			}
			yyVAL.statement = x
		}
	case 38:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:465
		{
			yyVAL.str = ""
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:469
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 40:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:473
		{
			escape := "\\"
			yyVAL.item = &FieldsClause{
				Terminated: "\t",
				Escaped:    escape[0],
			}
		}
	case 41:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:481
		{
			escape := yyDollar[4].item.(string)
			if escape != "\\" && len(escape) > 1 {
				yylex.Error("Incorrect arguments  to ESCAPE")
				return 1
			}
			var enclosed byte
			str := yyDollar[3].item.(string)
			if len(str) > 1 {
				yylex.Error("Incorrect arguments  to ENCLOSED")
				return 1
			} else if len(str) != 0 {
				enclosed = str[0]
			}
			yyVAL.item = &FieldsClause{
				Terminated: yyDollar[2].item.(string),
				Enclosed:   enclosed,
				Escaped:    escape[0],
			}
		}
	case 44:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:506
		{
			yyVAL.item = "\t"
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:510
		{
			yyVAL.item = string(yyDollar[3].bytes)
		}
	case 46:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:515
		{
			yyVAL.item = ""
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:519
		{
			yyVAL.item = string(yyDollar[3].bytes)
		}
	case 48:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:524
		{
			yyVAL.item = "\\"
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:528
		{
			yyVAL.item = string(yyDollar[3].bytes)
		}
	case 50:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:533
		{
			yyVAL.item = &LinesClause{Terminated: "\n"}
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:537
		{
			yyVAL.item = &LinesClause{Starting: yyDollar[2].item.(string), Terminated: yyDollar[3].item.(string)}
		}
	case 52:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:542
		{
			yyVAL.item = ""
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:546
		{
			yyVAL.item = string(yyDollar[3].bytes)

		}
	case 54:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:552
		{
			yyVAL.item = "\n"
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:556
		{
			yyVAL.item = string(yyDollar[3].bytes)
		}
	case 56:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:563
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 57:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:569
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 58:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:573
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 59:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:577
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:582
		{
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:583
		{
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:587
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:591
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 64:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:596
		{
			yyVAL.partitions = nil
		}
	case 65:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:600
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:606
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 67:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:610
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 68:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:614
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 69:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:618
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:624
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:628
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:634
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:638
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:642
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:648
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:652
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:656
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:660
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:666
		{
			yyVAL.str = SessionStr
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:670
		{
			yyVAL.str = GlobalStr
		}
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:676
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 82:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:681
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 83:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:686
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 84:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:690
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 85:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:694
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 86:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:702
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 87:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:706
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 88:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:711
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:715
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:721
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 91:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:726
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 92:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:731
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:737
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:742
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:748
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 96:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:754
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 97:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:761
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:768
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:773
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:777
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:781
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 102:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:787
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 103:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:798
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:809
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:814
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:820
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:824
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:828
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:832
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:836
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:840
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:844
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:850
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:856
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:862
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:868
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:874
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:882
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:886
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:890
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:894
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:898
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 126:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:904
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 127:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:908
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:912
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:916
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:920
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:924
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:928
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:932
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:936
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:940
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:944
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:948
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:952
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 139:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:956
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 140:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:961
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:967
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:971
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:975
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:979
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:983
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:987
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:991
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:995
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1001
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1006
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 151:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1011
		{
			yyVAL.optVal = nil
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1015
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 153:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1020
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 154:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1024
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1032
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1036
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 157:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1042
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 158:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1050
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1054
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1059
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1063
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1069
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1073
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1077
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 165:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1082
		{
			yyVAL.optVal = nil
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1086
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1090
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1094
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1098
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1102
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1106
		{
			yyVAL.optVal = NewBitVal(yyDollar[2].bytes)
		}
	case 172:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1111
		{
			yyVAL.optVal = nil
		}
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1115
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 174:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1120
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1124
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 176:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1129
		{
			yyVAL.str = ""
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1133
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1137
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 179:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1142
		{
			yyVAL.str = ""
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1146
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 181:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1151
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1155
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1159
		{
			yyVAL.colKeyOpt = colKey
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1163
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1167
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 186:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1172
		{
			yyVAL.optVal = nil
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1176
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 188:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1182
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 189:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1186
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1192
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1196
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1202
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1206
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1211
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 195:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1217
		{
			yyVAL.str = ""
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1221
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 197:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1227
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 198:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1231
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 199:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1235
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1239
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1243
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1249
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1253
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1259
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 205:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1263
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1269
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 207:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1275
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].bytes), Details: yyDollar[3].constraintInfo}
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1279
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 209:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:1286
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 210:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1291
		{
			yyVAL.str = ""
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1295
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 212:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1299
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1307
		{
			yyVAL.str = yyDollar[1].str
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1311
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 215:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1315
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1321
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1325
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1329
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 219:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1335
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 220:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1339
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 221:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1343
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 222:
		yyDollar = yyS[yypt-12 : yypt+1]
		//line sql.y:1347
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 223:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1360
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 224:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1370
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 225:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1375
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 226:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1380
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 227:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1384
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 239:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1403
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1409
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1413
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 242:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1419
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 243:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1423
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 244:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1429
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 245:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1435
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 246:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1443
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 247:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1448
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 248:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1456
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 249:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1460
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1466
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1470
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 252:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1475
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 253:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1481
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 254:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1485
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 255:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1489
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 256:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1494
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 257:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1498
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 258:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1502
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 259:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1506
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 260:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1510
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 261:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1514
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1518
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 263:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1522
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1526
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 265:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1530
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1534
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 267:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1538
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 268:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1543
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 269:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1553
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1557
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1561
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 272:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1565
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &yyDollar[4].expr}
		}
	case 273:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1569
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1573
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1577
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1581
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1585
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1595
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1601
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1605
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 281:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1611
		{
			yyVAL.str = ""
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1615
		{
			yyVAL.str = "full "
		}
	case 283:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1621
		{
			yyVAL.str = ""
		}
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1625
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1629
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 286:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1635
		{
			yyVAL.showFilter = nil
		}
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1639
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 288:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1643
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 289:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1649
		{
			yyVAL.str = ""
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1653
		{
			yyVAL.str = SessionStr
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1657
		{
			yyVAL.str = GlobalStr
		}
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1663
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1667
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1673
		{
			yyVAL.statement = &Begin{}
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1677
		{
			yyVAL.statement = &Begin{}
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1683
		{
			yyVAL.statement = &Commit{}
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1689
		{
			yyVAL.statement = &Rollback{}
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1695
		{
			yyVAL.statement = &OtherRead{}
		}
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1699
		{
			yyVAL.statement = &OtherRead{}
		}
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1703
		{
			yyVAL.statement = &OtherRead{}
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1707
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1711
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1715
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1719
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 305:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1724
		{
			setAllowComments(yylex, true)
		}
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1728
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 307:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1734
		{
			yyVAL.bytes2 = nil
		}
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1738
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1744
		{
			yyVAL.str = UnionStr
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1748
		{
			yyVAL.str = UnionAllStr
		}
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1752
		{
			yyVAL.str = UnionDistinctStr
		}
	case 312:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1757
		{
			yyVAL.str = ""
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1761
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1765
		{
			yyVAL.str = SQLCacheStr
		}
	case 315:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1770
		{
			yyVAL.str = ""
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1774
		{
			yyVAL.str = DistinctStr
		}
	case 317:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1779
		{
			yyVAL.str = ""
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1783
		{
			yyVAL.str = StraightJoinHint
		}
	case 319:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1788
		{
			yyVAL.selectExprs = nil
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1792
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1798
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1802
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1808
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1812
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 325:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1816
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 326:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1820
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 327:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1825
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1829
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1833
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1840
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 332:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1845
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1849
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1855
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 335:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1859
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1869
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 339:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1873
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 340:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1877
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1883
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 342:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1887
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1893
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 344:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1897
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1903
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1907
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 347:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1920
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 348:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1924
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 349:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1928
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 350:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1932
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1938
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 352:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1940
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 353:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1944
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1946
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 355:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1950
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 356:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1952
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 357:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1955
		{
			yyVAL.empty = struct{}{}
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1957
		{
			yyVAL.empty = struct{}{}
		}
	case 359:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1960
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1964
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 361:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1968
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1975
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1981
		{
			yyVAL.str = JoinStr
		}
	case 365:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1985
		{
			yyVAL.str = JoinStr
		}
	case 366:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1989
		{
			yyVAL.str = JoinStr
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1995
		{
			yyVAL.str = StraightJoinStr
		}
	case 368:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2001
		{
			yyVAL.str = LeftJoinStr
		}
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2005
		{
			yyVAL.str = LeftJoinStr
		}
	case 370:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2009
		{
			yyVAL.str = RightJoinStr
		}
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2013
		{
			yyVAL.str = RightJoinStr
		}
	case 372:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2019
		{
			yyVAL.str = NaturalJoinStr
		}
	case 373:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2023
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 374:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2033
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2037
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2043
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2047
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 378:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2052
		{
			yyVAL.indexHints = nil
		}
	case 379:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2056
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 380:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2060
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 381:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2064
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 382:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2069
		{
			yyVAL.expr = nil
		}
	case 383:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2073
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2079
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 385:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2083
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 386:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2087
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 387:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2091
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 388:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2095
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2099
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 390:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2103
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 391:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2109
		{
			yyVAL.str = ""
		}
	case 392:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2113
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2119
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2123
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 395:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2129
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 396:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2133
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 397:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2137
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 398:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2141
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 399:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2145
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2149
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 401:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2153
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 402:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2157
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 403:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2161
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 404:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2165
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2171
		{
			yyVAL.str = IsNullStr
		}
	case 406:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2175
		{
			yyVAL.str = IsNotNullStr
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2179
		{
			yyVAL.str = IsTrueStr
		}
	case 408:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2183
		{
			yyVAL.str = IsNotTrueStr
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2187
		{
			yyVAL.str = IsFalseStr
		}
	case 410:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2191
		{
			yyVAL.str = IsNotFalseStr
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2197
		{
			yyVAL.str = EqualStr
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2201
		{
			yyVAL.str = LessThanStr
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2205
		{
			yyVAL.str = GreaterThanStr
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2209
		{
			yyVAL.str = LessEqualStr
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2213
		{
			yyVAL.str = GreaterEqualStr
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2217
		{
			yyVAL.str = NotEqualStr
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2221
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 418:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2226
		{
			yyVAL.expr = nil
		}
	case 419:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2230
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2236
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2240
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2244
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2250
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2256
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2260
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2266
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2270
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2274
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2278
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2282
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2286
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2290
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2294
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 434:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2298
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 435:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2302
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2306
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 437:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2310
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 438:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2314
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2318
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 440:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2322
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 441:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2326
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2330
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 443:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2334
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2338
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 445:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2342
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 446:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2346
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 447:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2350
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 448:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2354
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 449:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2358
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 450:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2366
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 451:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2380
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 452:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2384
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2388
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 458:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2406
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 459:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2410
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 460:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2414
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 461:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2424
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 462:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2428
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 463:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2432
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 464:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2436
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 465:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2440
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 466:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2444
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 467:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2448
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 468:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2452
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 469:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2456
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 470:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2460
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 471:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2464
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 472:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:2468
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 473:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2472
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 474:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2476
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 475:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2480
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 476:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2490
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2494
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 478:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2498
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 479:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2502
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 480:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2507
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 481:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2512
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 482:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2517
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2522
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 486:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2536
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 487:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2540
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 488:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2544
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 489:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2548
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 490:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2554
		{
			yyVAL.str = ""
		}
	case 491:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2558
		{
			yyVAL.str = BooleanModeStr
		}
	case 492:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2562
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 493:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2566
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 494:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2570
		{
			yyVAL.str = QueryExpansionStr
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2576
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2580
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2586
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 498:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2590
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 499:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2594
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2598
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2602
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 502:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2606
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2612
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 504:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2616
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2620
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2624
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 507:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2628
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2632
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2636
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 510:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2641
		{
			yyVAL.expr = nil
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2645
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 512:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2650
		{
			yyVAL.str = string("")
		}
	case 513:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2654
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2660
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2664
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 516:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2670
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 517:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2675
		{
			yyVAL.expr = nil
		}
	case 518:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2679
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2685
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 520:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2689
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 521:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2693
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2699
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2703
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2707
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2711
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2715
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2719
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2723
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2727
		{
			yyVAL.expr = &NullVal{}
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2733
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 531:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2742
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 532:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2746
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 533:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2751
		{
			yyVAL.exprs = nil
		}
	case 534:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2755
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 535:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2760
		{
			yyVAL.expr = nil
		}
	case 536:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2764
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 537:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2769
		{
			yyVAL.orderBy = nil
		}
	case 538:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2773
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2779
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 540:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2783
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 541:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2789
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 542:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2794
		{
			yyVAL.str = AscScr
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2798
		{
			yyVAL.str = AscScr
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2802
		{
			yyVAL.str = DescScr
		}
	case 545:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2807
		{
			yyVAL.limit = nil
		}
	case 546:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2811
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 547:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2815
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 548:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2819
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 549:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2824
		{
			yyVAL.str = ""
		}
	case 550:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2828
		{
			yyVAL.str = ForUpdateStr
		}
	case 551:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2832
		{
			yyVAL.str = ShareModeStr
		}
	case 552:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2845
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2849
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 554:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2853
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 555:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2858
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 556:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2862
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 557:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2866
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 558:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2872
		{
			yyVAL.columns = nil
		}
	case 559:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2876
		{
			yyVAL.columns = yyDollar[2].columns
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2882
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 561:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2886
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 562:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2890
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 563:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2894
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 564:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2899
		{
			yyVAL.updateExprs = nil
		}
	case 565:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2903
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2909
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 567:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2913
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2919
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 569:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2923
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 570:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2929
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2935
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2945
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 573:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2949
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 574:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2955
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2961
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 576:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2965
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 577:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2971
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 578:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2975
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 579:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2979
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 581:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2986
		{
			yyVAL.bytes = []byte("charset")
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2993
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2997
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3001
		{
			yyVAL.expr = &Default{}
		}
	case 588:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3010
		{
			yyVAL.byt = 0
		}
	case 589:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3012
		{
			yyVAL.byt = 1
		}
	case 590:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3015
		{
			yyVAL.empty = struct{}{}
		}
	case 591:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3017
		{
			yyVAL.empty = struct{}{}
		}
	case 592:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3020
		{
			yyVAL.str = ""
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3022
		{
			yyVAL.str = IgnoreStr
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3026
		{
			yyVAL.empty = struct{}{}
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3028
		{
			yyVAL.empty = struct{}{}
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3030
		{
			yyVAL.empty = struct{}{}
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3032
		{
			yyVAL.empty = struct{}{}
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3034
		{
			yyVAL.empty = struct{}{}
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3036
		{
			yyVAL.empty = struct{}{}
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3038
		{
			yyVAL.empty = struct{}{}
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3040
		{
			yyVAL.empty = struct{}{}
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3042
		{
			yyVAL.empty = struct{}{}
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3044
		{
			yyVAL.empty = struct{}{}
		}
	case 604:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3047
		{
			yyVAL.empty = struct{}{}
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3049
		{
			yyVAL.empty = struct{}{}
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3051
		{
			yyVAL.empty = struct{}{}
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3055
		{
			yyVAL.empty = struct{}{}
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3057
		{
			yyVAL.empty = struct{}{}
		}
	case 609:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3060
		{
			yyVAL.empty = struct{}{}
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3062
		{
			yyVAL.empty = struct{}{}
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3064
		{
			yyVAL.empty = struct{}{}
		}
	case 612:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3067
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 613:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3069
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3073
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3077
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3084
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3090
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3094
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3101
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 826:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3330
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 827:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3339
		{
			decNesting(yylex)
		}
	case 828:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3344
		{
			forceEOF(yylex)
		}
	case 829:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3349
		{
			forceEOF(yylex)
		}
	case 830:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3353
		{
			forceEOF(yylex)
		}
	case 831:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3357
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
